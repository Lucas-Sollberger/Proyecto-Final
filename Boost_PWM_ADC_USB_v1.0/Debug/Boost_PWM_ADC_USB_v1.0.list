
Boost_PWM_ADC_USB_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a434  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a5bc  0800a5bc  0000b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a61c  0800a61c  0000c100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a61c  0800a61c  0000b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a624  0800a624  0000c100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a624  0800a624  0000b624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a628  0800a628  0000b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800a62c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c100  2**0
                  CONTENTS
 10 .bss          00001f38  20000100  20000100  0000c100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002038  20002038  0000c100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ed2  00000000  00000000  0000c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035f3  00000000  00000000  00021002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  000245f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e35  00000000  00000000  00025890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002516b  00000000  00000000  000266c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b28  00000000  00000000  0004b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da188  00000000  00000000  00063358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d4e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fb0  00000000  00000000  0013d524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  001424d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a5a4 	.word	0x0800a5a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	0800a5a4 	.word	0x0800a5a4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <bandaMuerta>:
uint16_t x_prev = 0;
float deadBand = 0.05;

float duty= 0;

float bandaMuerta(float x) {		//Banda muerta para el potenciometro
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	ed87 0a01 	vstr	s0, [r7, #4]

	if (fabs(x - x_prev) < deadBand) {
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <bandaMuerta+0xb0>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	ee07 3a90 	vmov	s15, r3
 8000e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e66:	eeb0 7ae7 	vabs.f32	s14, s15
 8000e6a:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <bandaMuerta+0xb4>)
 8000e6c:	edd3 7a00 	vldr	s15, [r3]
 8000e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	d508      	bpl.n	8000e8c <bandaMuerta+0x44>
		x = x_prev;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <bandaMuerta+0xb0>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e86:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e8a:	e008      	b.n	8000e9e <bandaMuerta+0x56>
	} else {
		x_prev = x;
 8000e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e94:	ee17 3a90 	vmov	r3, s15
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <bandaMuerta+0xb0>)
 8000e9c:	801a      	strh	r2, [r3, #0]
	}

	if (x < 0.1){
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff faf6 	bl	8000490 <__aeabi_f2d>
 8000ea4:	a310      	add	r3, pc, #64	@ (adr r3, 8000ee8 <bandaMuerta+0xa0>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fdbb 	bl	8000a24 <__aeabi_dcmplt>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <bandaMuerta+0x70>
		return 0.1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <bandaMuerta+0xb8>)
 8000eb6:	e00d      	b.n	8000ed4 <bandaMuerta+0x8c>
	}
	else if (x > 0.9){
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fae9 	bl	8000490 <__aeabi_f2d>
 8000ebe:	a30c      	add	r3, pc, #48	@ (adr r3, 8000ef0 <bandaMuerta+0xa8>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fdcc 	bl	8000a60 <__aeabi_dcmpgt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <bandaMuerta+0x8a>
		return 0.9;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <bandaMuerta+0xbc>)
 8000ed0:	e000      	b.n	8000ed4 <bandaMuerta+0x8c>
	}
	else{
		return x;
 8000ed2:	687b      	ldr	r3, [r7, #4]
	}
}
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	9999999a 	.word	0x9999999a
 8000eec:	3fb99999 	.word	0x3fb99999
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	3feccccc 	.word	0x3feccccc
 8000ef8:	2000044a 	.word	0x2000044a
 8000efc:	20000000 	.word	0x20000000
 8000f00:	3dcccccd 	.word	0x3dcccccd
 8000f04:	3f666666 	.word	0x3f666666

08000f08 <set_period>:

void set_period(float duty){
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	ed87 0a01 	vstr	s0, [r7, #4]

	duty_pwm = duty * (htim4.Init.Period + 1);
 8000f12:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <set_period+0x118>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f20:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f2c:	ee17 3a90 	vmov	r3, s15
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b3c      	ldr	r3, [pc, #240]	@ (8001024 <set_period+0x11c>)
 8000f34:	801a      	strh	r2, [r3, #0]

	if (duty > 0.5){
 8000f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	dd22      	ble.n	8000f8e <set_period+0x86>
		trigger = (duty*0.5) * (htim8.Init.Period + 1);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff faa1 	bl	8000490 <__aeabi_f2d>
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b35      	ldr	r3, [pc, #212]	@ (8001028 <set_period+0x120>)
 8000f54:	f7ff faf4 	bl	8000540 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	461d      	mov	r5, r3
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <set_period+0x124>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa70 	bl	800044c <__aeabi_ui2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4620      	mov	r0, r4
 8000f72:	4629      	mov	r1, r5
 8000f74:	f7ff fae4 	bl	8000540 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fd78 	bl	8000a74 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <set_period+0x128>)
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e035      	b.n	8000ffa <set_period+0xf2>
	}
	else{
		trigger = ((1-duty)*0.5 + duty) * (htim8.Init.Period + 1);
 8000f8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	ee17 0a90 	vmov	r0, s15
 8000f9e:	f7ff fa77 	bl	8000490 <__aeabi_f2d>
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <set_period+0x120>)
 8000fa8:	f7ff faca 	bl	8000540 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fa6b 	bl	8000490 <__aeabi_f2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	f7ff f907 	bl	80001d4 <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4614      	mov	r4, r2
 8000fcc:	461d      	mov	r5, r3
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <set_period+0x124>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa39 	bl	800044c <__aeabi_ui2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff faad 	bl	8000540 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd41 	bl	8000a74 <__aeabi_d2uiz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <set_period+0x128>)
 8000ff8:	801a      	strh	r2, [r3, #0]
	}

	trigger = duty_pwm;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <set_period+0x11c>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <set_period+0x128>)
 8001000:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, duty_pwm);
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <set_period+0x11c>)
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <set_period+0x118>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3, trigger);
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <set_period+0x128>)
 800100e:	881a      	ldrh	r2, [r3, #0]
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <set_period+0x124>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	200001c4 	.word	0x200001c4
 8001024:	20000446 	.word	0x20000446
 8001028:	3fe00000 	.word	0x3fe00000
 800102c:	2000020c 	.word	0x2000020c
 8001030:	20000448 	.word	0x20000448

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b598      	push	{r3, r4, r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fec4 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f8ae 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 fb3a 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001044:	f000 fae2 	bl	800160c <MX_DMA_Init>
  MX_ADC1_Init();
 8001048:	f000 f912 	bl	8001270 <MX_ADC1_Init>
  MX_TIM4_Init();
 800104c:	f000 f9c4 	bl	80013d8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001050:	f000 fa3a 	bl	80014c8 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8001054:	f008 fd60 	bl	8009b18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	DBGMCU->APB1FZ |= (DBGMCU_APB1_FZ_DBG_TIM4_STOP);//Detiene el clock del APB1 en Debug Mode
 8001058:	4b47      	ldr	r3, [pc, #284]	@ (8001178 <main+0x144>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a46      	ldr	r2, [pc, #280]	@ (8001178 <main+0x144>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6093      	str	r3, [r2, #8]
	DBGMCU->APB2FZ |= (DBGMCU_APB2_FZ_DBG_TIM8_STOP);//Detiene el clock del APB2 en Debug Mode
 8001064:	4b44      	ldr	r3, [pc, #272]	@ (8001178 <main+0x144>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a43      	ldr	r2, [pc, #268]	@ (8001178 <main+0x144>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	60d3      	str	r3, [r2, #12]

	__HAL_TIM_SET_COUNTER(&htim4, 0);//Reseteo los contadores de ambos timers para que cuenten en paralelo
 8001070:	4b42      	ldr	r3, [pc, #264]	@ (800117c <main+0x148>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 8001078:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <main+0x14c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc1_array, (sizeof(adc1_array) / sizeof(adc1_array[0]))) != HAL_OK) {//Inicio el DMA para enviar los datos del ADC a la variable "adc1_array" -> Iniciarlo antes que los Timers!!!
 8001080:	2250      	movs	r2, #80	@ 0x50
 8001082:	4940      	ldr	r1, [pc, #256]	@ (8001184 <main+0x150>)
 8001084:	4840      	ldr	r0, [pc, #256]	@ (8001188 <main+0x154>)
 8001086:	f000 ff77 	bl	8001f78 <HAL_ADC_Start_DMA>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <main+0x60>
		Error_Handler();
 8001090:	f000 fc9a 	bl	80019c8 <Error_Handler>
	}


	if (HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1) != HAL_OK) {//Inicio el CH1 del Timer 4. Salida del  PWM
 8001094:	2100      	movs	r1, #0
 8001096:	4839      	ldr	r0, [pc, #228]	@ (800117c <main+0x148>)
 8001098:	f004 fa6e 	bl	8005578 <HAL_TIM_PWM_Start_IT>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <main+0x72>
		Error_Handler();
 80010a2:	f000 fc91 	bl	80019c8 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK) {//Inicio el CH3 del Timer 8. Salida del  PWM
 80010a6:	2108      	movs	r1, #8
 80010a8:	4835      	ldr	r0, [pc, #212]	@ (8001180 <main+0x14c>)
 80010aa:	f004 fa65 	bl	8005578 <HAL_TIM_PWM_Start_IT>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <main+0x84>
		Error_Handler();
 80010b4:	f000 fc88 	bl	80019c8 <Error_Handler>
	}

	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 0.5*(htim4.Init.Period + 1));
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <main+0x148>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9c4 	bl	800044c <__aeabi_ui2d>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b30      	ldr	r3, [pc, #192]	@ (800118c <main+0x158>)
 80010ca:	f7ff fa39 	bl	8000540 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	492a      	ldr	r1, [pc, #168]	@ (800117c <main+0x148>)
 80010d4:	680c      	ldr	r4, [r1, #0]
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fccb 	bl	8000a74 <__aeabi_d2uiz>
 80010de:	4603      	mov	r3, r0
 80010e0:	6363      	str	r3, [r4, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_3, 0.5*(htim8.Init.Period + 1));
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <main+0x14c>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f9af 	bl	800044c <__aeabi_ui2d>
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b26      	ldr	r3, [pc, #152]	@ (800118c <main+0x158>)
 80010f4:	f7ff fa24 	bl	8000540 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4920      	ldr	r1, [pc, #128]	@ (8001180 <main+0x14c>)
 80010fe:	680c      	ldr	r4, [r1, #0]
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fcb6 	bl	8000a74 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63e3      	str	r3, [r4, #60]	@ 0x3c

	HAL_GPIO_WritePin(Rele_1_GPIO_Port, Rele_1_Pin, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	2110      	movs	r1, #16
 8001110:	481f      	ldr	r0, [pc, #124]	@ (8001190 <main+0x15c>)
 8001112:	f002 fa93 	bl	800363c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rele_2_GPIO_Port, Rele_2_Pin, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	2120      	movs	r1, #32
 800111a:	481d      	ldr	r0, [pc, #116]	@ (8001190 <main+0x15c>)
 800111c:	f002 fa8e 	bl	800363c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rele_3_GPIO_Port, Rele_3_Pin, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	2140      	movs	r1, #64	@ 0x40
 8001124:	481a      	ldr	r0, [pc, #104]	@ (8001190 <main+0x15c>)
 8001126:	f002 fa89 	bl	800363c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(500);
 800112a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800112e:	f000 febb 	bl	8001ea8 <HAL_Delay>

	  duty = bandaMuerta(adc1_array[6]/4096.0);
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <main+0x150>)
 8001134:	899b      	ldrh	r3, [r3, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f998 	bl	800046c <__aeabi_i2d>
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <main+0x160>)
 8001142:	f7ff fb27 	bl	8000794 <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcb1 	bl	8000ab4 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	ee00 3a10 	vmov	s0, r3
 8001158:	f7ff fe76 	bl	8000e48 <bandaMuerta>
 800115c:	eef0 7a40 	vmov.f32	s15, s0
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <main+0x164>)
 8001162:	edc3 7a00 	vstr	s15, [r3]



	  set_period(duty);
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <main+0x164>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	f7ff feca 	bl	8000f08 <set_period>
	  HAL_Delay(500);
 8001174:	bf00      	nop
 8001176:	e7d8      	b.n	800112a <main+0xf6>
 8001178:	e0042000 	.word	0xe0042000
 800117c:	200001c4 	.word	0x200001c4
 8001180:	2000020c 	.word	0x2000020c
 8001184:	200002b4 	.word	0x200002b4
 8001188:	2000011c 	.word	0x2000011c
 800118c:	3fe00000 	.word	0x3fe00000
 8001190:	40021000 	.word	0x40021000
 8001194:	40b00000 	.word	0x40b00000
 8001198:	2000044c 	.word	0x2000044c

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	@ 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f009 f9ce 	bl	800a54c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a27      	ldr	r2, [pc, #156]	@ (8001268 <SystemClock_Config+0xcc>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <SystemClock_Config+0xcc>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a21      	ldr	r2, [pc, #132]	@ (800126c <SystemClock_Config+0xd0>)
 80011e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <SystemClock_Config+0xd0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800120c:	2304      	movs	r3, #4
 800120e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001210:	23a8      	movs	r3, #168	@ 0xa8
 8001212:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001218:	2307      	movs	r3, #7
 800121a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fc91 	bl	8004b48 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800122c:	f000 fbcc 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2302      	movs	r3, #2
 8001236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800123c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001246:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2105      	movs	r1, #5
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fef2 	bl	8005038 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800125a:	f000 fbb5 	bl	80019c8 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3750      	adds	r7, #80	@ 0x50
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001282:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <MX_ADC1_Init+0x160>)
 8001284:	4a53      	ldr	r2, [pc, #332]	@ (80013d4 <MX_ADC1_Init+0x164>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001288:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <MX_ADC1_Init+0x160>)
 800128a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800128e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001290:	4b4f      	ldr	r3, [pc, #316]	@ (80013d0 <MX_ADC1_Init+0x160>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001296:	4b4e      	ldr	r3, [pc, #312]	@ (80013d0 <MX_ADC1_Init+0x160>)
 8001298:	2201      	movs	r2, #1
 800129a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800129c:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <MX_ADC1_Init+0x160>)
 800129e:	2200      	movs	r2, #0
 80012a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a2:	4b4b      	ldr	r3, [pc, #300]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80012aa:	4b49      	ldr	r3, [pc, #292]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012b4:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ba:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80012c0:	4b43      	ldr	r3, [pc, #268]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012c6:	4b42      	ldr	r3, [pc, #264]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012ce:	4b40      	ldr	r3, [pc, #256]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d4:	483e      	ldr	r0, [pc, #248]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012d6:	f000 fe0b 	bl	8001ef0 <HAL_ADC_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80012e0:	f000 fb72 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012ec:	2303      	movs	r3, #3
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4836      	ldr	r0, [pc, #216]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80012f6:	f000 ff59 	bl	80021ac <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001300:	f000 fb62 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001304:	2302      	movs	r3, #2
 8001306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001308:	2302      	movs	r3, #2
 800130a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	463b      	mov	r3, r7
 800130e:	4619      	mov	r1, r3
 8001310:	482f      	ldr	r0, [pc, #188]	@ (80013d0 <MX_ADC1_Init+0x160>)
 8001312:	f000 ff4b 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800131c:	f000 fb54 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001320:	2303      	movs	r3, #3
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001324:	2303      	movs	r3, #3
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4828      	ldr	r0, [pc, #160]	@ (80013d0 <MX_ADC1_Init+0x160>)
 800132e:	f000 ff3d 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001338:	f000 fb46 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800133c:	2304      	movs	r3, #4
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4821      	ldr	r0, [pc, #132]	@ (80013d0 <MX_ADC1_Init+0x160>)
 800134a:	f000 ff2f 	bl	80021ac <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001354:	f000 fb38 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001358:	2305      	movs	r3, #5
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800135c:	2305      	movs	r3, #5
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	481a      	ldr	r0, [pc, #104]	@ (80013d0 <MX_ADC1_Init+0x160>)
 8001366:	f000 ff21 	bl	80021ac <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001370:	f000 fb2a 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001374:	2306      	movs	r3, #6
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001378:	2306      	movs	r3, #6
 800137a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4813      	ldr	r0, [pc, #76]	@ (80013d0 <MX_ADC1_Init+0x160>)
 8001382:	f000 ff13 	bl	80021ac <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800138c:	f000 fb1c 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001390:	2307      	movs	r3, #7
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001394:	2307      	movs	r3, #7
 8001396:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <MX_ADC1_Init+0x160>)
 800139e:	f000 ff05 	bl	80021ac <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80013a8:	f000 fb0e 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013ac:	230e      	movs	r3, #14
 80013ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80013b0:	2308      	movs	r3, #8
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_ADC1_Init+0x160>)
 80013ba:	f000 fef7 	bl	80021ac <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80013c4:	f000 fb00 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	40012000 	.word	0x40012000

080013d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	@ 0x38
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001408:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 800140a:	4a2e      	ldr	r2, [pc, #184]	@ (80014c4 <MX_TIM4_Init+0xec>)
 800140c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800140e:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8399;
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 800141c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001420:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800142e:	4824      	ldr	r0, [pc, #144]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 8001430:	f003 fffa 	bl	8005428 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800143a:	f000 fac5 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	481d      	ldr	r0, [pc, #116]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 800144c:	f004 fb5c 	bl	8005b08 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001456:	f000 fab7 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800145a:	4819      	ldr	r0, [pc, #100]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 800145c:	f004 f833 	bl	80054c6 <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001466:	f000 faaf 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 800147a:	f004 ff51 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001484:	f000 faa0 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	@ 0x60
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4400;
 800148c:	f241 1330 	movw	r3, #4400	@ 0x1130
 8001490:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	4807      	ldr	r0, [pc, #28]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 80014a2:	f004 fa6f 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80014ac:	f000 fa8c 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014b0:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <MX_TIM4_Init+0xe8>)
 80014b2:	f000 fb91 	bl	8001bd8 <HAL_TIM_MspPostInit>

}
 80014b6:	bf00      	nop
 80014b8:	3738      	adds	r7, #56	@ 0x38
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001c4 	.word	0x200001c4
 80014c4:	40000800 	.word	0x40000800

080014c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	@ 0x58
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2220      	movs	r2, #32
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f009 f823 	bl	800a54c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001506:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001508:	4a3f      	ldr	r2, [pc, #252]	@ (8001608 <MX_TIM8_Init+0x140>)
 800150a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800150c:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <MX_TIM8_Init+0x13c>)
 800150e:	2201      	movs	r2, #1
 8001510:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8399;
 8001518:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <MX_TIM8_Init+0x13c>)
 800151a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800151e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <MX_TIM8_Init+0x13c>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001532:	4834      	ldr	r0, [pc, #208]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001534:	f003 ff78 	bl	8005428 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800153e:	f000 fa43 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800154c:	4619      	mov	r1, r3
 800154e:	482d      	ldr	r0, [pc, #180]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001550:	f004 fada 	bl	8005b08 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800155a:	f000 fa35 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800155e:	4829      	ldr	r0, [pc, #164]	@ (8001604 <MX_TIM8_Init+0x13c>)
 8001560:	f003 ffb1 	bl	80054c6 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800156a:	f000 fa2d 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800156e:	2360      	movs	r3, #96	@ 0x60
 8001570:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001576:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800157a:	4619      	mov	r1, r3
 800157c:	4821      	ldr	r0, [pc, #132]	@ (8001604 <MX_TIM8_Init+0x13c>)
 800157e:	f004 fecf 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001588:	f000 fa1e 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	@ 0x60
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 4200;
 8001590:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	2208      	movs	r2, #8
 80015b0:	4619      	mov	r1, r3
 80015b2:	4814      	ldr	r0, [pc, #80]	@ (8001604 <MX_TIM8_Init+0x13c>)
 80015b4:	f004 f9e6 	bl	8005984 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80015be:	f000 fa03 	bl	80019c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4807      	ldr	r0, [pc, #28]	@ (8001604 <MX_TIM8_Init+0x13c>)
 80015e6:	f004 ff17 	bl	8006418 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80015f0:	f000 f9ea 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015f4:	4803      	ldr	r0, [pc, #12]	@ (8001604 <MX_TIM8_Init+0x13c>)
 80015f6:	f000 faef 	bl	8001bd8 <HAL_TIM_MspPostInit>

}
 80015fa:	bf00      	nop
 80015fc:	3758      	adds	r7, #88	@ 0x58
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000020c 	.word	0x2000020c
 8001608:	40010400 	.word	0x40010400

0800160c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <MX_DMA_Init+0xa0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a24      	ldr	r2, [pc, #144]	@ (80016ac <MX_DMA_Init+0xa0>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MX_DMA_Init+0xa0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001630:	4a20      	ldr	r2, [pc, #128]	@ (80016b4 <MX_DMA_Init+0xa8>)
 8001632:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_DMA_Init+0xa4>)
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001640:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001646:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_DMA_Init+0xa4>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001650:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001656:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_DMA_Init+0xa4>)
 800165a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800166c:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <MX_DMA_Init+0xa4>)
 800166e:	2204      	movs	r2, #4
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001674:	2203      	movs	r2, #3
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <MX_DMA_Init+0xa4>)
 800167a:	2200      	movs	r2, #0
 800167c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8001684:	480a      	ldr	r0, [pc, #40]	@ (80016b0 <MX_DMA_Init+0xa4>)
 8001686:	f001 f943 	bl	8002910 <HAL_DMA_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8001690:	f000 f99a 	bl	80019c8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2038      	movs	r0, #56	@ 0x38
 800169a:	f001 f902 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800169e:	2038      	movs	r0, #56	@ 0x38
 80016a0:	f001 f91b 	bl	80028da <HAL_NVIC_EnableIRQ>

}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	20000254 	.word	0x20000254
 80016b4:	40026428 	.word	0x40026428

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	@ 0x30
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <MX_GPIO_Init+0x130>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a44      	ldr	r2, [pc, #272]	@ (80017e8 <MX_GPIO_Init+0x130>)
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b42      	ldr	r3, [pc, #264]	@ (80017e8 <MX_GPIO_Init+0x130>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <MX_GPIO_Init+0x130>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a3d      	ldr	r2, [pc, #244]	@ (80017e8 <MX_GPIO_Init+0x130>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <MX_GPIO_Init+0x130>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <MX_GPIO_Init+0x130>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a36      	ldr	r2, [pc, #216]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b30      	ldr	r3, [pc, #192]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a2f      	ldr	r2, [pc, #188]	@ (80017e8 <MX_GPIO_Init+0x130>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <MX_GPIO_Init+0x130>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_GPIO_Init+0x130>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Rele_1_Pin|Rele_2_Pin|Rele_3_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	2170      	movs	r1, #112	@ 0x70
 800177a:	481c      	ldr	r0, [pc, #112]	@ (80017ec <MX_GPIO_Init+0x134>)
 800177c:	f001 ff5e 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_ROJO_Pin|LED_AZUL_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001786:	481a      	ldr	r0, [pc, #104]	@ (80017f0 <MX_GPIO_Init+0x138>)
 8001788:	f001 ff58 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Rele_1_Pin Rele_2_Pin Rele_3_Pin */
  GPIO_InitStruct.Pin = Rele_1_Pin|Rele_2_Pin|Rele_3_Pin;
 800178c:	2370      	movs	r3, #112	@ 0x70
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0x134>)
 80017a4:	f001 fdae 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_VERDE_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_VERDE_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_GPIO_Init+0x138>)
 80017be:	f001 fda1 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROJO_Pin LED_AZUL_Pin */
  GPIO_InitStruct.Pin = LED_ROJO_Pin|LED_AZUL_Pin;
 80017c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_GPIO_Init+0x138>)
 80017dc:	f001 fd92 	bl	8003304 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	@ 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40020c00 	.word	0x40020c00

080017f4 <convert_Uint16_to_Uint8>:

/* USER CODE BEGIN 4 */



void convert_Uint16_to_Uint8(uint16_t *srcArray, size_t srcLength, uint8_t *destArray){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]

    // Agregar encabezado
    destArray[0] = 0xAA; // Primer byte del encabezado
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	22aa      	movs	r2, #170	@ 0xaa
 8001804:	701a      	strb	r2, [r3, #0]
    destArray[1] = 0x55; // Segundo byte del encabezado
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	2255      	movs	r2, #85	@ 0x55
 800180c:	701a      	strb	r2, [r3, #0]

    // Convertir uint16_t a uint8_t y agregar al array de destino
    for (size_t i = 0; i < srcLength; i++) {
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e01c      	b.n	800184e <convert_Uint16_to_Uint8+0x5a>
        destArray[2 + 2 * i] = srcArray[i] & 0xFF;       	  // Parte baja del uint16_t
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	8819      	ldrh	r1, [r3, #0]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	b2ca      	uxtb	r2, r1
 800182a:	701a      	strb	r2, [r3, #0]
        destArray[2 + 2 * i + 1] = (srcArray[i] >> 8) & 0xFF; // Parte alta del uint16_t
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b299      	uxth	r1, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	3303      	adds	r3, #3
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < srcLength; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3de      	bcc.n	8001814 <convert_Uint16_to_Uint8+0x20>

    }


    ITM_Port32(2) = 1;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <convert_Uint16_to_Uint8+0x80>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
    CDC_Transmit_FS((uint8_t *) tx_buffer_final, sizeof(tx_buffer_final));	//Envia por USB los datos
 800185c:	2152      	movs	r1, #82	@ 0x52
 800185e:	4806      	ldr	r0, [pc, #24]	@ (8001878 <convert_Uint16_to_Uint8+0x84>)
 8001860:	f008 fa18 	bl	8009c94 <CDC_Transmit_FS>
    ITM_Port32(2) = 0;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <convert_Uint16_to_Uint8+0x80>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e0000008 	.word	0xe0000008
 8001878:	200003f4 	.word	0x200003f4

0800187c <DMA_Transfer>:


void DMA_Transfer(uint16_t *source, uint16_t *destination, uint16_t size){
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]

    ITM_Port32(20) = 0;
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <DMA_Transfer+0x44>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
    // Inicia la transferencia DMA
    if (HAL_DMA_Start(&hdma_memtomem_dma2_stream1, (uint32_t)source, (uint32_t)destination, size) != HAL_OK) {
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <DMA_Transfer+0x48>)
 8001898:	f001 f8e8 	bl	8002a6c <HAL_DMA_Start>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <DMA_Transfer+0x2a>
        Error_Handler();         // Error de inicio
 80018a2:	f000 f891 	bl	80019c8 <Error_Handler>
    }

    HAL_DMA_PollForTransfer(&hdma_memtomem_dma2_stream1, HAL_DMA_FULL_TRANSFER, 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2100      	movs	r1, #0
 80018aa:	4806      	ldr	r0, [pc, #24]	@ (80018c4 <DMA_Transfer+0x48>)
 80018ac:	f001 f9e1 	bl	8002c72 <HAL_DMA_PollForTransfer>
    ITM_Port32(20) = 1;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <DMA_Transfer+0x44>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e0000050 	.word	0xe0000050
 80018c4:	20000254 	.word	0x20000254

080018c8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {									  	//Interrupcion que indica el fin de la conversion
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

	if (hadc->DMA_Handle == &hdma_adc1) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <HAL_ADC_ConvCpltCallback+0x3c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10f      	bne.n	80018fa <HAL_ADC_ConvCpltCallback+0x32>
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018e0:	4809      	ldr	r0, [pc, #36]	@ (8001908 <HAL_ADC_ConvCpltCallback+0x40>)
 80018e2:	f001 feab 	bl	800363c <HAL_GPIO_WritePin>
		DMA_Transfer(&adc1_array[ADC_BUFFER_HALF_SIZE], &tx_buffer2[0], ADC_BUFFER_HALF_SIZE); 	//Transfiere la segunda mitad de los datos al registro tx_buffer2
 80018e6:	2228      	movs	r2, #40	@ 0x28
 80018e8:	4908      	ldr	r1, [pc, #32]	@ (800190c <HAL_ADC_ConvCpltCallback+0x44>)
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_ADC_ConvCpltCallback+0x48>)
 80018ec:	f7ff ffc6 	bl	800187c <DMA_Transfer>
		convert_Uint16_to_Uint8(tx_buffer2, ADC_BUFFER_HALF_SIZE, tx_buffer_final);
 80018f0:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <HAL_ADC_ConvCpltCallback+0x4c>)
 80018f2:	2128      	movs	r1, #40	@ 0x28
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <HAL_ADC_ConvCpltCallback+0x44>)
 80018f6:	f7ff ff7d 	bl	80017f4 <convert_Uint16_to_Uint8>
	}

}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000164 	.word	0x20000164
 8001908:	40020c00 	.word	0x40020c00
 800190c:	200003a4 	.word	0x200003a4
 8001910:	20000304 	.word	0x20000304
 8001914:	200003f4 	.word	0x200003f4

08001918 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {									//Interrupcion cuando el DMA lleno la mitad del buffer
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

	if (hadc->DMA_Handle == &hdma_adc1) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001924:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10f      	bne.n	800194a <HAL_ADC_ConvHalfCpltCallback+0x32>
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001932:	f001 fe83 	bl	800363c <HAL_GPIO_WritePin>
		DMA_Transfer(&adc1_array[0], &tx_buffer1[0], ADC_BUFFER_HALF_SIZE);						//Transfiere la primer mitad de los datos al registro tx_buffer1
 8001936:	2228      	movs	r2, #40	@ 0x28
 8001938:	4908      	ldr	r1, [pc, #32]	@ (800195c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800193a:	4809      	ldr	r0, [pc, #36]	@ (8001960 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800193c:	f7ff ff9e 	bl	800187c <DMA_Transfer>
		convert_Uint16_to_Uint8(tx_buffer1, ADC_BUFFER_HALF_SIZE, tx_buffer_final);
 8001940:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8001942:	2128      	movs	r1, #40	@ 0x28
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001946:	f7ff ff55 	bl	80017f4 <convert_Uint16_to_Uint8>
	}

}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000164 	.word	0x20000164
 8001958:	40020c00 	.word	0x40020c00
 800195c:	20000354 	.word	0x20000354
 8001960:	200002b4 	.word	0x200002b4
 8001964:	200003f4 	.word	0x200003f4

08001968 <HAL_TIM_PWM_PulseFinishedCallback>:



//Funcion Callback llamada por las interrupciones de los timers. Deben estar habilitadas en la configuracion
// Ingresa con el flanco descendente del PWM
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM8) {			//TRGO
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a10      	ldr	r2, [pc, #64]	@ (80019b8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10d      	bne.n	8001996 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
		ITM_Port32(30) = 1;
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin);	//PD15
 8001980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001984:	480e      	ldr	r0, [pc, #56]	@ (80019c0 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8001986:	f001 fe72 	bl	800366e <HAL_GPIO_TogglePin>
//
		HAL_GPIO_WritePin(LED_ROJO_GPIO_Port, LED_ROJO_Pin, 0); //PD14
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001990:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8001992:	f001 fe53 	bl	800363c <HAL_GPIO_WritePin>
	}

	if (htim->Instance == TIM4) {			//PWM -
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d107      	bne.n	80019b0 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
		ITM_Port32(30) = 2;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin); //PD12
 80019a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80019ac:	f001 fe5f 	bl	800366e <HAL_GPIO_TogglePin>

	}
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010400 	.word	0x40010400
 80019bc:	e0000078 	.word	0xe0000078
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40000800 	.word	0x40000800

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a12:	2007      	movs	r0, #7
 8001a14:	f000 ff3a 	bl	800288c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3c      	ldr	r2, [pc, #240]	@ (8001b34 <HAL_ADC_MspInit+0x110>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d172      	bne.n	8001b2c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a56:	4b38      	ldr	r3, [pc, #224]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b34      	ldr	r3, [pc, #208]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a33      	ldr	r2, [pc, #204]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b31      	ldr	r3, [pc, #196]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <HAL_ADC_MspInit+0x114>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = I_OUT_Pin|V_LEM_Pin|V_i30_Pin|V_OUT_Pin
 8001a9a:	23fe      	movs	r3, #254	@ 0xfe
 8001a9c:	617b      	str	r3, [r7, #20]
                          |I_IN_Pin|V_EXT_Pin|Pote_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4823      	ldr	r0, [pc, #140]	@ (8001b3c <HAL_ADC_MspInit+0x118>)
 8001aae:	f001 fc29 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_IN_Pin;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_IN_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481e      	ldr	r0, [pc, #120]	@ (8001b40 <HAL_ADC_MspInit+0x11c>)
 8001ac6:	f001 fc1d 	bl	8003304 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001acc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b48 <HAL_ADC_MspInit+0x124>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001b04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b08:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001b12:	f000 fefd 	bl	8002910 <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001b1c:	f7ff ff54 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001b24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b26:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_ADC_MspInit+0x120>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012000 	.word	0x40012000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020800 	.word	0x40020800
 8001b44:	20000164 	.word	0x20000164
 8001b48:	40026410 	.word	0x40026410

08001b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_TIM_Base_MspInit+0x80>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d116      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x84>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x84>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x84>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	201e      	movs	r0, #30
 8001b80:	f000 fe8f 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b84:	201e      	movs	r0, #30
 8001b86:	f000 fea8 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b8a:	e01a      	b.n	8001bc2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a10      	ldr	r2, [pc, #64]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x88>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d115      	bne.n	8001bc2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x84>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x84>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x84>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	202e      	movs	r0, #46	@ 0x2e
 8001bb8:	f000 fe73 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bbc:	202e      	movs	r0, #46	@ 0x2e
 8001bbe:	f000 fe8c 	bl	80028da <HAL_NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a24      	ldr	r2, [pc, #144]	@ (8001c88 <HAL_TIM_MspPostInit+0xb0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11e      	bne.n	8001c38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_TIM_MspPostInit+0xb4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a22      	ldr	r2, [pc, #136]	@ (8001c8c <HAL_TIM_MspPostInit+0xb4>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_TIM_MspPostInit+0xb4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001c16:	2340      	movs	r3, #64	@ 0x40
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c26:	2302      	movs	r3, #2
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4817      	ldr	r0, [pc, #92]	@ (8001c90 <HAL_TIM_MspPostInit+0xb8>)
 8001c32:	f001 fb67 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c36:	e023      	b.n	8001c80 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a15      	ldr	r2, [pc, #84]	@ (8001c94 <HAL_TIM_MspPostInit+0xbc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d11e      	bne.n	8001c80 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_TIM_MspPostInit+0xb4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a10      	ldr	r2, [pc, #64]	@ (8001c8c <HAL_TIM_MspPostInit+0xb4>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_TIM_MspPostInit+0xb4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRGO_Pin;
 8001c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c70:	2303      	movs	r3, #3
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TRGO_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <HAL_TIM_MspPostInit+0xc0>)
 8001c7c:	f001 fb42 	bl	8003304 <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	@ 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40000800 	.word	0x40000800
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40010400 	.word	0x40010400
 8001c98:	40020800 	.word	0x40020800

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf2:	f000 f8b9 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <TIM4_IRQHandler+0x10>)
 8001d02:	f003 fd4f 	bl	80057a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001c4 	.word	0x200001c4

08001d10 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <TIM8_CC_IRQHandler+0x10>)
 8001d16:	f003 fd45 	bl	80057a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000020c 	.word	0x2000020c

08001d24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA2_Stream0_IRQHandler+0x10>)
 8001d2a:	f001 f881 	bl	8002e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000164 	.word	0x20000164

08001d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <OTG_FS_IRQHandler+0x10>)
 8001d3e:	f001 fdf4 	bl	800392a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20001934 	.word	0x20001934

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <SystemInit+0x20>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <SystemInit+0x20>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d74:	f7ff ffea 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f008 fbdd 	bl	800a55c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff f947 	bl	8001034 <main>
  bx  lr    
 8001da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001db4:	0800a62c 	.word	0x0800a62c
  ldr r2, =_sbss
 8001db8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001dbc:	20002038 	.word	0x20002038

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 fd4d 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fdec 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fd65 	bl	80028f6 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 fd2d 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	2000000c 	.word	0x2000000c
 8001e64:	20000008 	.word	0x20000008

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000450 	.word	0x20000450

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000450 	.word	0x20000450

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000000c 	.word	0x2000000c

08001ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e033      	b.n	8001f6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fd88 	bl	8001a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d118      	bne.n	8001f60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f36:	f023 0302 	bic.w	r3, r3, #2
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa54 	bl	80023f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f5e:	e001      	b.n	8001f64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_Start_DMA+0x1e>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0e9      	b.n	800216a <HAL_ADC_Start_DMA+0x1f2>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d018      	beq.n	8001fde <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fbc:	4b6d      	ldr	r3, [pc, #436]	@ (8002174 <HAL_ADC_Start_DMA+0x1fc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a6d      	ldr	r2, [pc, #436]	@ (8002178 <HAL_ADC_Start_DMA+0x200>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9a      	lsrs	r2, r3, #18
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fd0:	e002      	b.n	8001fd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fec:	d107      	bne.n	8001ffe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	f040 80a1 	bne.w	8002150 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002038:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800204c:	d106      	bne.n	800205c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f023 0206 	bic.w	r2, r3, #6
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
 800205a:	e002      	b.n	8002062 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206a:	4b44      	ldr	r3, [pc, #272]	@ (800217c <HAL_ADC_Start_DMA+0x204>)
 800206c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	4a43      	ldr	r2, [pc, #268]	@ (8002180 <HAL_ADC_Start_DMA+0x208>)
 8002074:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207a:	4a42      	ldr	r2, [pc, #264]	@ (8002184 <HAL_ADC_Start_DMA+0x20c>)
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002082:	4a41      	ldr	r2, [pc, #260]	@ (8002188 <HAL_ADC_Start_DMA+0x210>)
 8002084:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800208e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800209e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	334c      	adds	r3, #76	@ 0x4c
 80020ba:	4619      	mov	r1, r3
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f000 fd0f 	bl	8002ae2 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d12a      	bne.n	8002126 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <HAL_ADC_Start_DMA+0x214>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d015      	beq.n	8002106 <HAL_ADC_Start_DMA+0x18e>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <HAL_ADC_Start_DMA+0x218>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_Start_DMA+0x178>
 80020e4:	4b25      	ldr	r3, [pc, #148]	@ (800217c <HAL_ADC_Start_DMA+0x204>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_ADC_Start_DMA+0x21c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d136      	bne.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_ADC_Start_DMA+0x204>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d130      	bne.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d129      	bne.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e020      	b.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a18      	ldr	r2, [pc, #96]	@ (800218c <HAL_ADC_Start_DMA+0x214>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d11b      	bne.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d114      	bne.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e00b      	b.n	8002168 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f043 0210 	orr.w	r2, r3, #16
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000004 	.word	0x20000004
 8002178:	431bde83 	.word	0x431bde83
 800217c:	40012300 	.word	0x40012300
 8002180:	080025e9 	.word	0x080025e9
 8002184:	080026a3 	.word	0x080026a3
 8002188:	080026bf 	.word	0x080026bf
 800218c:	40012000 	.word	0x40012000
 8002190:	40012100 	.word	0x40012100
 8002194:	40012200 	.word	0x40012200

08002198 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1c>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e105      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x228>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	d925      	bls.n	8002224 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68d9      	ldr	r1, [r3, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	3b1e      	subs	r3, #30
 80021ee:	2207      	movs	r2, #7
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43da      	mvns	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	400a      	ands	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68d9      	ldr	r1, [r3, #12]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	4603      	mov	r3, r0
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4403      	add	r3, r0
 8002216:	3b1e      	subs	r3, #30
 8002218:	409a      	lsls	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	e022      	b.n	800226a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	2207      	movs	r2, #7
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	400a      	ands	r2, r1
 8002246:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	4618      	mov	r0, r3
 800225a:	4603      	mov	r3, r0
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4403      	add	r3, r0
 8002260:	409a      	lsls	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b06      	cmp	r3, #6
 8002270:	d824      	bhi.n	80022bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b05      	subs	r3, #5
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b05      	subs	r3, #5
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ba:	e04c      	b.n	8002356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d824      	bhi.n	800230e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b23      	subs	r3, #35	@ 0x23
 80022d6:	221f      	movs	r2, #31
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43da      	mvns	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	400a      	ands	r2, r1
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b23      	subs	r3, #35	@ 0x23
 8002300:	fa00 f203 	lsl.w	r2, r0, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
 800230c:	e023      	b.n	8002356 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b41      	subs	r3, #65	@ 0x41
 8002320:	221f      	movs	r2, #31
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	400a      	ands	r2, r1
 800232e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b41      	subs	r3, #65	@ 0x41
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002356:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <HAL_ADC_ConfigChannel+0x234>)
 8002358:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a21      	ldr	r2, [pc, #132]	@ (80023e4 <HAL_ADC_ConfigChannel+0x238>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d109      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1cc>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b12      	cmp	r3, #18
 800236a:	d105      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_ADC_ConfigChannel+0x238>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d123      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x21e>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b10      	cmp	r3, #16
 8002388:	d003      	beq.n	8002392 <HAL_ADC_ConfigChannel+0x1e6>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b11      	cmp	r3, #17
 8002390:	d11b      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d111      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_ADC_ConfigChannel+0x23c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a10      	ldr	r2, [pc, #64]	@ (80023ec <HAL_ADC_ConfigChannel+0x240>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9a      	lsrs	r2, r3, #18
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012300 	.word	0x40012300
 80023e4:	40012000 	.word	0x40012000
 80023e8:	20000004 	.word	0x20000004
 80023ec:	431bde83 	.word	0x431bde83

080023f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f8:	4b79      	ldr	r3, [pc, #484]	@ (80025e0 <ADC_Init+0x1f0>)
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	4a58      	ldr	r2, [pc, #352]	@ (80025e4 <ADC_Init+0x1f4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d022      	beq.n	80024ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e00f      	b.n	80024ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0202 	bic.w	r2, r2, #2
 80024fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7e1b      	ldrb	r3, [r3, #24]
 8002508:	005a      	lsls	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01b      	beq.n	8002554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800253a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	3b01      	subs	r3, #1
 8002548:	035a      	lsls	r2, r3, #13
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	e007      	b.n	8002564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002562:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	3b01      	subs	r3, #1
 8002580:	051a      	lsls	r2, r3, #20
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025a6:	025a      	lsls	r2, r3, #9
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	029a      	lsls	r2, r3, #10
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40012300 	.word	0x40012300
 80025e4:	0f000001 	.word	0x0f000001

080025e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d13c      	bne.n	800267c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d12b      	bne.n	8002674 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002620:	2b00      	cmp	r3, #0
 8002622:	d127      	bne.n	8002674 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d119      	bne.n	8002674 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0220 	bic.w	r2, r2, #32
 800264e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff f927 	bl	80018c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800267a:	e00e      	b.n	800269a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fd85 	bl	8002198 <HAL_ADC_ErrorCallback>
}
 800268e:	e004      	b.n	800269a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff f931 	bl	8001918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2240      	movs	r2, #64	@ 0x40
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff fd5a 	bl	8002198 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	@ (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	@ (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	@ (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff29 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff3e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff31 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff fab8 	bl	8001e90 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e099      	b.n	8002a60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294c:	e00f      	b.n	800296e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800294e:	f7ff fa9f 	bl	8001e90 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b05      	cmp	r3, #5
 800295a:	d908      	bls.n	800296e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e078      	b.n	8002a60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e8      	bne.n	800294e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <HAL_DMA_Init+0x158>)
 8002988:	4013      	ands	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d107      	bne.n	80029d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	4313      	orrs	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d117      	bne.n	8002a32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fbf9 	bl	800320c <DMA_CheckFifoParam>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2240      	movs	r2, #64	@ 0x40
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e016      	b.n	8002a60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fbb0 	bl	80031a0 <DMA_CalcBaseAndBitshift>
 8002a40:	4603      	mov	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	223f      	movs	r2, #63	@ 0x3f
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	f010803f 	.word	0xf010803f

08002a6c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Start+0x20>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e026      	b.n	8002ada <HAL_DMA_Start+0x6e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d115      	bne.n	8002acc <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fb45 	bl	8003144 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e005      	b.n	8002ad8 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_DMA_Start_IT+0x26>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e040      	b.n	8002b8a <HAL_DMA_Start_IT+0xa8>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d12f      	bne.n	8002b7c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fb07 	bl	8003144 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	223f      	movs	r2, #63	@ 0x3f
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0216 	orr.w	r2, r2, #22
 8002b50:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0208 	orr.w	r2, r2, #8
 8002b68:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e005      	b.n	8002b88 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
 8002b86:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff f976 	bl	8001e90 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d008      	beq.n	8002bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e052      	b.n	8002c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0216 	bic.w	r2, r2, #22
 8002bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <HAL_DMA_Abort+0x62>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c14:	e013      	b.n	8002c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c16:	f7ff f93b 	bl	8001e90 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d90c      	bls.n	8002c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e015      	b.n	8002c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e4      	bne.n	8002c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	@ 0x28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8002c80:	2300      	movs	r3, #0
 8002c82:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8002c84:	f7ff f904 	bl	8001e90 <HAL_GetTick>
 8002c88:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d008      	beq.n	8002ca8 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2280      	movs	r2, #128	@ 0x80
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0bf      	b.n	8002e28 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0b2      	b.n	8002e28 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2220      	movs	r2, #32
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd4:	e005      	b.n	8002ce2 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cda:	2210      	movs	r2, #16
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002cee:	e05a      	b.n	8002da6 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d017      	beq.n	8002d28 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_DMA_PollForTransfer+0x9c>
 8002cfe:	f7ff f8c7 	bl	8001e90 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20c      	bcs.n	8002d28 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e07f      	b.n	8002e28 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	2201      	movs	r2, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d82:	2204      	movs	r2, #4
 8002d84:	409a      	lsls	r2, r3
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	f043 0204 	orr.w	r2, r3, #4
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9e:	2204      	movs	r2, #4
 8002da0:	409a      	lsls	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_DMA_PollForTransfer+0x14a>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d099      	beq.n	8002cf0 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d018      	beq.n	8002df6 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fede 	bl	8002b92 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dda:	2230      	movs	r2, #48	@ 0x30
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e018      	b.n	8002e28 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10e      	bne.n	8002e1a <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e00:	2230      	movs	r2, #48	@ 0x30
 8002e02:	409a      	lsls	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002e18:	e005      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1e:	2210      	movs	r2, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	@ 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003078 <HAL_DMA_IRQHandler+0x248>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a8e      	ldr	r2, [pc, #568]	@ (800307c <HAL_DMA_IRQHandler+0x24c>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01a      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	2208      	movs	r2, #8
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d043      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d03c      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d024      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
 8002f5e:	e01f      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e016      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0208 	bic.w	r2, r2, #8
 8002f8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 808f 	beq.w	80030d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8087 	beq.w	80030d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d136      	bne.n	8003048 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0216 	bic.w	r2, r2, #22
 8002fe8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ff8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <HAL_DMA_IRQHandler+0x1da>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0208 	bic.w	r2, r2, #8
 8003018:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301e:	223f      	movs	r2, #63	@ 0x3f
 8003020:	409a      	lsls	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303a:	2b00      	cmp	r3, #0
 800303c:	d07e      	beq.n	800313c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
        }
        return;
 8003046:	e079      	b.n	800313c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01d      	beq.n	8003092 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003068:	2b00      	cmp	r3, #0
 800306a:	d031      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
 8003074:	e02c      	b.n	80030d0 <HAL_DMA_IRQHandler+0x2a0>
 8003076:	bf00      	nop
 8003078:	20000004 	.word	0x20000004
 800307c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d023      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
 8003090:	e01e      	b.n	80030d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10f      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0210 	bic.w	r2, r2, #16
 80030ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d032      	beq.n	800313e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d022      	beq.n	800312a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2205      	movs	r2, #5
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	d307      	bcc.n	8003118 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f2      	bne.n	80030fc <HAL_DMA_IRQHandler+0x2cc>
 8003116:	e000      	b.n	800311a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003118:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e000      	b.n	800313e <HAL_DMA_IRQHandler+0x30e>
        return;
 800313c:	bf00      	nop
    }
  }
}
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003160:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b40      	cmp	r3, #64	@ 0x40
 8003170:	d108      	bne.n	8003184 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003182:	e007      	b.n	8003194 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3b10      	subs	r3, #16
 80031b0:	4a14      	ldr	r2, [pc, #80]	@ (8003204 <DMA_CalcBaseAndBitshift+0x64>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ba:	4a13      	ldr	r2, [pc, #76]	@ (8003208 <DMA_CalcBaseAndBitshift+0x68>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d909      	bls.n	80031e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	1d1a      	adds	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e0:	e007      	b.n	80031f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	aaaaaaab 	.word	0xaaaaaaab
 8003208:	0800a614 	.word	0x0800a614

0800320c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d11f      	bne.n	8003266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d856      	bhi.n	80032da <DMA_CheckFifoParam+0xce>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <DMA_CheckFifoParam+0x28>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003245 	.word	0x08003245
 8003238:	08003257 	.word	0x08003257
 800323c:	08003245 	.word	0x08003245
 8003240:	080032db 	.word	0x080032db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003248:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d046      	beq.n	80032de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003254:	e043      	b.n	80032de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800325e:	d140      	bne.n	80032e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e03d      	b.n	80032e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800326e:	d121      	bne.n	80032b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d837      	bhi.n	80032e6 <DMA_CheckFifoParam+0xda>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <DMA_CheckFifoParam+0x70>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	0800328d 	.word	0x0800328d
 8003280:	08003293 	.word	0x08003293
 8003284:	0800328d 	.word	0x0800328d
 8003288:	080032a5 	.word	0x080032a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e030      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d025      	beq.n	80032ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a2:	e022      	b.n	80032ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ac:	d11f      	bne.n	80032ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032b2:	e01c      	b.n	80032ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d903      	bls.n	80032c2 <DMA_CheckFifoParam+0xb6>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d003      	beq.n	80032c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032c0:	e018      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
      break;
 80032c6:	e015      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e00b      	b.n	80032f2 <DMA_CheckFifoParam+0xe6>
      break;
 80032da:	bf00      	nop
 80032dc:	e00a      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e008      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
 80032e4:	e006      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e004      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e002      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
    }
  } 
  
  return status; 
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e16b      	b.n	80035f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 815a 	bne.w	80035f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d005      	beq.n	8003356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003352:	2b02      	cmp	r3, #2
 8003354:	d130      	bne.n	80033b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 0201 	and.w	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d017      	beq.n	80033f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d123      	bne.n	8003448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80b4 	beq.w	80035f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b60      	ldr	r3, [pc, #384]	@ (8003610 <HAL_GPIO_Init+0x30c>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	4a5f      	ldr	r2, [pc, #380]	@ (8003610 <HAL_GPIO_Init+0x30c>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003498:	6453      	str	r3, [r2, #68]	@ 0x44
 800349a:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <HAL_GPIO_Init+0x30c>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003614 <HAL_GPIO_Init+0x310>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a52      	ldr	r2, [pc, #328]	@ (8003618 <HAL_GPIO_Init+0x314>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x226>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a51      	ldr	r2, [pc, #324]	@ (800361c <HAL_GPIO_Init+0x318>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d025      	beq.n	8003526 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a50      	ldr	r2, [pc, #320]	@ (8003620 <HAL_GPIO_Init+0x31c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003624 <HAL_GPIO_Init+0x320>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x21a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003628 <HAL_GPIO_Init+0x324>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x216>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4d      	ldr	r2, [pc, #308]	@ (800362c <HAL_GPIO_Init+0x328>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x212>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003630 <HAL_GPIO_Init+0x32c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4b      	ldr	r2, [pc, #300]	@ (8003634 <HAL_GPIO_Init+0x330>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x20a>
 800350a:	2307      	movs	r3, #7
 800350c:	e00e      	b.n	800352c <HAL_GPIO_Init+0x228>
 800350e:	2308      	movs	r3, #8
 8003510:	e00c      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003512:	2306      	movs	r3, #6
 8003514:	e00a      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003516:	2305      	movs	r3, #5
 8003518:	e008      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351a:	2304      	movs	r3, #4
 800351c:	e006      	b.n	800352c <HAL_GPIO_Init+0x228>
 800351e:	2303      	movs	r3, #3
 8003520:	e004      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003522:	2302      	movs	r3, #2
 8003524:	e002      	b.n	800352c <HAL_GPIO_Init+0x228>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_GPIO_Init+0x228>
 800352a:	2300      	movs	r3, #0
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f002 0203 	and.w	r2, r2, #3
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	4093      	lsls	r3, r2
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800353c:	4935      	ldr	r1, [pc, #212]	@ (8003614 <HAL_GPIO_Init+0x310>)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354a:	4b3b      	ldr	r3, [pc, #236]	@ (8003638 <HAL_GPIO_Init+0x334>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356e:	4a32      	ldr	r2, [pc, #200]	@ (8003638 <HAL_GPIO_Init+0x334>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003574:	4b30      	ldr	r3, [pc, #192]	@ (8003638 <HAL_GPIO_Init+0x334>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003598:	4a27      	ldr	r2, [pc, #156]	@ (8003638 <HAL_GPIO_Init+0x334>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800359e:	4b26      	ldr	r3, [pc, #152]	@ (8003638 <HAL_GPIO_Init+0x334>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <HAL_GPIO_Init+0x334>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_GPIO_Init+0x334>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ec:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <HAL_GPIO_Init+0x334>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	f67f ae90 	bls.w	8003320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3724      	adds	r7, #36	@ 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	40013800 	.word	0x40013800
 8003618:	40020000 	.word	0x40020000
 800361c:	40020400 	.word	0x40020400
 8003620:	40020800 	.word	0x40020800
 8003624:	40020c00 	.word	0x40020c00
 8003628:	40021000 	.word	0x40021000
 800362c:	40021400 	.word	0x40021400
 8003630:	40021800 	.word	0x40021800
 8003634:	40021c00 	.word	0x40021c00
 8003638:	40013c00 	.word	0x40013c00

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003658:	e003      	b.n	8003662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	041a      	lsls	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	619a      	str	r2, [r3, #24]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003680:	887a      	ldrh	r2, [r7, #2]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	041a      	lsls	r2, r3, #16
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	43d9      	mvns	r1, r3
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	400b      	ands	r3, r1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e101      	b.n	80038b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f006 fc28 	bl	8009f24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2203      	movs	r2, #3
 80036d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e2:	d102      	bne.n	80036ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 f80f 	bl	8006712 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7c1a      	ldrb	r2, [r3, #16]
 80036fc:	f88d 2000 	strb.w	r2, [sp]
 8003700:	3304      	adds	r3, #4
 8003702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003704:	f002 feee 	bl	80064e4 <USB_CoreInit>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0ce      	b.n	80038b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f003 f807 	bl	8006734 <USB_SetCurrentMode>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0bf      	b.n	80038b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e04a      	b.n	80037d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3315      	adds	r3, #21
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3314      	adds	r3, #20
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	b298      	uxth	r0, r3
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	332e      	adds	r3, #46	@ 0x2e
 800377a:	4602      	mov	r2, r0
 800377c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3318      	adds	r3, #24
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003792:	7bfa      	ldrb	r2, [r7, #15]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	331c      	adds	r3, #28
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3320      	adds	r3, #32
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3324      	adds	r3, #36	@ 0x24
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3301      	adds	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	791b      	ldrb	r3, [r3, #4]
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3af      	bcc.n	800373e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	e044      	b.n	800386e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	791b      	ldrb	r3, [r3, #4]
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	429a      	cmp	r2, r3
 8003876:	d3b5      	bcc.n	80037e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7c1a      	ldrb	r2, [r3, #16]
 8003880:	f88d 2000 	strb.w	r2, [sp]
 8003884:	3304      	adds	r3, #4
 8003886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003888:	f002 ffa0 	bl	80067cc <USB_DevInit>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e00c      	b.n	80038b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 ffea 	bl	800788a <USB_DevDisconnect>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_PCD_Start+0x1c>
 80038d8:	2302      	movs	r3, #2
 80038da:	e022      	b.n	8003922 <HAL_PCD_Start+0x62>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f002 fef1 	bl	80066f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f003 ff98 	bl	8007848 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800392a:	b590      	push	{r4, r7, lr}
 800392c:	b08d      	sub	sp, #52	@ 0x34
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f004 f856 	bl	80079f2 <USB_GetMode>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 848c 	bne.w	8004266 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f003 ffba 	bl	80078cc <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8482 	beq.w	8004264 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f003 ffa7 	bl	80078cc <USB_ReadInterrupts>
 800397e:	4603      	mov	r3, r0
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d107      	bne.n	8003998 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f002 0202 	and.w	r2, r2, #2
 8003996:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f003 ff95 	bl	80078cc <USB_ReadInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d161      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0210 	bic.w	r2, r2, #16
 80039ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f003 020f 	and.w	r2, r3, #15
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	0c5b      	lsrs	r3, r3, #17
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d124      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d035      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a38      	ldr	r0, [r7, #32]
 8003a08:	f003 fdcc 	bl	80075a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a18:	441a      	add	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a2a:	441a      	add	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	615a      	str	r2, [r3, #20]
 8003a30:	e016      	b.n	8003a60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	0c5b      	lsrs	r3, r3, #17
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d110      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a44:	2208      	movs	r2, #8
 8003a46:	4619      	mov	r1, r3
 8003a48:	6a38      	ldr	r0, [r7, #32]
 8003a4a:	f003 fdab 	bl	80075a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a5a:	441a      	add	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0210 	orr.w	r2, r2, #16
 8003a6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 ff29 	bl	80078cc <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a84:	f040 80a7 	bne.w	8003bd6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f003 ff2e 	bl	80078f2 <USB_ReadDevAllOutEpInterrupt>
 8003a96:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003a98:	e099      	b.n	8003bce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 808e 	beq.w	8003bc2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 ff52 	bl	800795a <USB_ReadDevOutEPInterrupt>
 8003ab6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fea4 	bl	8004824 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00c      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	2308      	movs	r3, #8
 8003af6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 ff7a 	bl	80049f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b16:	461a      	mov	r2, r3
 8003b18:	2310      	movs	r3, #16
 8003b1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d030      	beq.n	8003b88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	2b80      	cmp	r3, #128	@ 0x80
 8003b30:	d109      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f006 fadd 	bl	800a130 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b82:	461a      	mov	r2, r3
 8003b84:	2302      	movs	r3, #2
 8003b86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bc0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af62 	bne.w	8003a9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f003 fe76 	bl	80078cc <USB_ReadInterrupts>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003be6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bea:	f040 80db 	bne.w	8003da4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 fe97 	bl	8007926 <USB_ReadDevAllInEpInterrupt>
 8003bf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003bfe:	e0cd      	b.n	8003d9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80c2 	beq.w	8003d90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f003 febd 	bl	8007996 <USB_ReadDevInEPInterrupt>
 8003c1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d057      	beq.n	8003cd8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	2201      	movs	r2, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69f9      	ldr	r1, [r7, #28]
 8003c44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c48:	4013      	ands	r3, r2
 8003c4a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	799b      	ldrb	r3, [r3, #6]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d132      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3320      	adds	r3, #32
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	331c      	adds	r3, #28
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4419      	add	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4403      	add	r3, r0
 8003c9a:	3320      	adds	r3, #32
 8003c9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d113      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x3a2>
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3324      	adds	r3, #36	@ 0x24
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f003 fec4 	bl	8007a54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f006 f9a7 	bl	800a026 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d26:	461a      	mov	r2, r3
 8003d28:	2340      	movs	r3, #64	@ 0x40
 8003d2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d38:	6a38      	ldr	r0, [r7, #32]
 8003d3a:	f002 feab 	bl	8006a94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3310      	adds	r3, #16
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	78db      	ldrb	r3, [r3, #3]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d108      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f006 f9f4 	bl	800a154 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fcbd 	bl	800470a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	3301      	adds	r3, #1
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f47f af2e 	bne.w	8003c00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fd8f 	bl	80078cc <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003db4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003db8:	d122      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d108      	bne.n	8003dea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003de0:	2100      	movs	r1, #0
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fea4 	bl	8004b30 <HAL_PCDEx_LPM_Callback>
 8003de8:	e002      	b.n	8003df0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f006 f992 	bl	800a114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fd61 	bl	80078cc <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e14:	d112      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f006 f94e 	bl	800a0c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003e3a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fd43 	bl	80078cc <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e50:	f040 80b7 	bne.w	8003fc2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 fe10 	bl	8006a94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e78:	e046      	b.n	8003f08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e86:	461a      	mov	r2, r3
 8003e88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ea8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003eac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ec0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003edc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003efc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	3301      	adds	r3, #1
 8003f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d3b2      	bcc.n	8003e7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f22:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f26:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7bdb      	ldrb	r3, [r3, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f40:	f043 030b 	orr.w	r3, r3, #11
 8003f44:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f56:	f043 030b 	orr.w	r3, r3, #11
 8003f5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f5c:	e015      	b.n	8003f8a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f70:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003f74:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f84:	f043 030b 	orr.w	r3, r3, #11
 8003f88:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f98:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f9c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fac:	461a      	mov	r2, r3
 8003fae:	f003 fd51 	bl	8007a54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fc80 	bl	80078cc <USB_ReadInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd6:	d123      	bne.n	8004020 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 fd16 	bl	8007a0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f002 fdcd 	bl	8006b86 <USB_GetDevSpeed>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681c      	ldr	r4, [r3, #0]
 8003ff8:	f001 fa0a 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004002:	461a      	mov	r2, r3
 8004004:	4620      	mov	r0, r4
 8004006:	f002 fad1 	bl	80065ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f006 f833 	bl	800a076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800401e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f003 fc51 	bl	80078cc <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d10a      	bne.n	800404a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f006 f810 	bl	800a05a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f002 0208 	and.w	r2, r2, #8
 8004048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fc3c 	bl	80078cc <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d123      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800406a:	2301      	movs	r3, #1
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
 800406e:	e014      	b.n	800409a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	b2db      	uxtb	r3, r3
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fb0a 	bl	80046a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	3301      	adds	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	791b      	ldrb	r3, [r3, #4]
 800409e:	461a      	mov	r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d3e4      	bcc.n	8004070 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 fc0e 	bl	80078cc <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ba:	d13c      	bne.n	8004136 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040bc:	2301      	movs	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c0:	e02b      	b.n	800411a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	3318      	adds	r3, #24
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d115      	bne.n	8004114 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	da12      	bge.n	8004114 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3317      	adds	r3, #23
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 faca 	bl	80046a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	3301      	adds	r3, #1
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	791b      	ldrb	r3, [r3, #4]
 800411e:	461a      	mov	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	4293      	cmp	r3, r2
 8004124:	d3cd      	bcc.n	80040c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f003 fbc6 	bl	80078cc <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800414a:	d156      	bne.n	80041fa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004150:	e045      	b.n	80041de <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d12e      	bne.n	80041d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800417a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	da2b      	bge.n	80041d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800418c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004190:	429a      	cmp	r2, r3
 8004192:	d121      	bne.n	80041d8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041d4:	6053      	str	r3, [r2, #4]
            break;
 80041d6:	e008      	b.n	80041ea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	3301      	adds	r3, #1
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	791b      	ldrb	r3, [r3, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d3b3      	bcc.n	8004152 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80041f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 fb64 	bl	80078cc <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d10a      	bne.n	8004226 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f005 ffb1 	bl	800a178 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f003 fb4e 	bl	80078cc <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d115      	bne.n	8004266 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f005 ffa1 	bl	800a194 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	e000      	b.n	8004266 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004264:	bf00      	nop
    }
  }
}
 8004266:	3734      	adds	r7, #52	@ 0x34
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}

0800426c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_PCD_SetAddress+0x1a>
 8004282:	2302      	movs	r3, #2
 8004284:	e012      	b.n	80042ac <HAL_PCD_SetAddress+0x40>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f003 faad 	bl	80077fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	4603      	mov	r3, r0
 80042c4:	70fb      	strb	r3, [r7, #3]
 80042c6:	460b      	mov	r3, r1
 80042c8:	803b      	strh	r3, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	da0f      	bge.n	80042fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	3310      	adds	r3, #16
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	3304      	adds	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	705a      	strb	r2, [r3, #1]
 80042f8:	e00f      	b.n	800431a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004326:	883b      	ldrh	r3, [r7, #0]
 8004328:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	78ba      	ldrb	r2, [r7, #2]
 8004334:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004348:	78bb      	ldrb	r3, [r7, #2]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d102      	bne.n	8004354 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_PCD_EP_Open+0xae>
 800435e:	2302      	movs	r3, #2
 8004360:	e00e      	b.n	8004380 <HAL_PCD_EP_Open+0xcc>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fc2d 	bl	8006bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800437e:	7afb      	ldrb	r3, [r7, #11]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004398:	2b00      	cmp	r3, #0
 800439a:	da0f      	bge.n	80043bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 020f 	and.w	r2, r3, #15
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	3310      	adds	r3, #16
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	3304      	adds	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	705a      	strb	r2, [r3, #1]
 80043ba:	e00f      	b.n	80043dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_Close+0x6e>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e00e      	b.n	8004414 <HAL_PCD_EP_Close+0x8c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f002 fc6b 	bl	8006ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	460b      	mov	r3, r1
 800442a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800442c:	7afb      	ldrb	r3, [r7, #11]
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	3304      	adds	r3, #4
 8004444:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800445e:	7afb      	ldrb	r3, [r7, #11]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	b2da      	uxtb	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	799b      	ldrb	r3, [r3, #6]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	799b      	ldrb	r3, [r3, #6]
 8004480:	461a      	mov	r2, r3
 8004482:	6979      	ldr	r1, [r7, #20]
 8004484:	f002 fd08 	bl	8006e98 <USB_EPStartXfer>

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80044b4:	681b      	ldr	r3, [r3, #0]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	460b      	mov	r3, r1
 80044d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	3310      	adds	r3, #16
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2201      	movs	r2, #1
 8004500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	b2da      	uxtb	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	799b      	ldrb	r3, [r3, #6]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	799b      	ldrb	r3, [r3, #6]
 8004524:	461a      	mov	r2, r3
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	f002 fcb6 	bl	8006e98 <USB_EPStartXfer>

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	7912      	ldrb	r2, [r2, #4]
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e04f      	b.n	80045f4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004558:	2b00      	cmp	r3, #0
 800455a:	da0f      	bge.n	800457c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 020f 	and.w	r2, r3, #15
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	3310      	adds	r3, #16
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	3304      	adds	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	705a      	strb	r2, [r3, #1]
 800457a:	e00d      	b.n	8004598 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_PCD_EP_SetStall+0x82>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e01d      	b.n	80045f4 <HAL_PCD_EP_SetStall+0xbe>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68f9      	ldr	r1, [r7, #12]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 f844 	bl	8007654 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7999      	ldrb	r1, [r3, #6]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045e4:	461a      	mov	r2, r3
 80045e6:	f003 fa35 	bl	8007a54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	7912      	ldrb	r2, [r2, #4]
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e042      	b.n	80046a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800461a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da0f      	bge.n	8004642 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	3310      	adds	r3, #16
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	3304      	adds	r3, #4
 8004638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	705a      	strb	r2, [r3, #1]
 8004640:	e00f      	b.n	8004662 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4413      	add	r3, r2
 8004658:	3304      	adds	r3, #4
 800465a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	b2da      	uxtb	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_PCD_EP_ClrStall+0x86>
 800467e:	2302      	movs	r3, #2
 8004680:	e00e      	b.n	80046a0 <HAL_PCD_EP_ClrStall+0xa4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	4618      	mov	r0, r3
 8004692:	f003 f84d 	bl	8007730 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	da0c      	bge.n	80046d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	3310      	adds	r3, #16
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	3304      	adds	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e00c      	b.n	80046f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f002 fe6c 	bl	80073d4 <USB_EPStopXfer>
 80046fc:	4603      	mov	r3, r0
 80046fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004700:	7afb      	ldrb	r3, [r7, #11]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b08a      	sub	sp, #40	@ 0x28
 800470e:	af02      	add	r7, sp, #8
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	3310      	adds	r3, #16
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	3304      	adds	r3, #4
 8004730:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	429a      	cmp	r2, r3
 800473c:	d901      	bls.n	8004742 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06b      	b.n	800481a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	429a      	cmp	r2, r3
 8004756:	d902      	bls.n	800475e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3303      	adds	r3, #3
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004766:	e02a      	b.n	80047be <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	429a      	cmp	r2, r3
 800477c:	d902      	bls.n	8004784 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3303      	adds	r3, #3
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68d9      	ldr	r1, [r3, #12]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4603      	mov	r3, r0
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f002 fec1 	bl	8007528 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	441a      	add	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	441a      	add	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d809      	bhi.n	80047e8 <PCD_WriteEmptyTxFifo+0xde>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047dc:	429a      	cmp	r2, r3
 80047de:	d203      	bcs.n	80047e8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1bf      	bne.n	8004768 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d811      	bhi.n	8004818 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	2201      	movs	r2, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	43db      	mvns	r3, r3
 800480e:	6939      	ldr	r1, [r7, #16]
 8004810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004814:	4013      	ands	r3, r2
 8004816:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	333c      	adds	r3, #60	@ 0x3c
 800483c:	3304      	adds	r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	799b      	ldrb	r3, [r3, #6]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d17b      	bne.n	8004952 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d015      	beq.n	8004890 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4a61      	ldr	r2, [pc, #388]	@ (80049ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	f240 80b9 	bls.w	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 80b3 	beq.w	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004886:	461a      	mov	r2, r3
 8004888:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	e0a7      	b.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a6:	461a      	mov	r2, r3
 80048a8:	2320      	movs	r3, #32
 80048aa:	6093      	str	r3, [r2, #8]
 80048ac:	e098      	b.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 8093 	bne.w	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	4a4b      	ldr	r2, [pc, #300]	@ (80049ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90f      	bls.n	80048e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d8:	461a      	mov	r2, r3
 80048da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048de:	6093      	str	r3, [r2, #8]
 80048e0:	e07e      	b.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4413      	add	r3, r2
 80048f4:	3304      	adds	r3, #4
 80048f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	0159      	lsls	r1, r3, #5
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	440b      	add	r3, r1
 8004904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490e:	1ad2      	subs	r2, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d114      	bne.n	8004944 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800492c:	461a      	mov	r2, r3
 800492e:	2101      	movs	r1, #1
 8004930:	f003 f890 	bl	8007a54 <USB_EP0_OutStart>
 8004934:	e006      	b.n	8004944 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	441a      	add	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f005 fb50 	bl	8009ff0 <HAL_PCD_DataOutStageCallback>
 8004950:	e046      	b.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	4a26      	ldr	r2, [pc, #152]	@ (80049f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d124      	bne.n	80049a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004970:	461a      	mov	r2, r3
 8004972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004976:	6093      	str	r3, [r2, #8]
 8004978:	e032      	b.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004990:	461a      	mov	r2, r3
 8004992:	2320      	movs	r3, #32
 8004994:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f005 fb27 	bl	8009ff0 <HAL_PCD_DataOutStageCallback>
 80049a2:	e01d      	b.n	80049e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d114      	bne.n	80049d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049cc:	461a      	mov	r2, r3
 80049ce:	2100      	movs	r1, #0
 80049d0:	f003 f840 	bl	8007a54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f005 fb08 	bl	8009ff0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	4f54300a 	.word	0x4f54300a
 80049f0:	4f54310a 	.word	0x4f54310a

080049f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	333c      	adds	r3, #60	@ 0x3c
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a15      	ldr	r2, [pc, #84]	@ (8004a7c <PCD_EP_OutSetupPacket_int+0x88>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d90e      	bls.n	8004a48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a40:	461a      	mov	r2, r3
 8004a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f005 fabf 	bl	8009fcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <PCD_EP_OutSetupPacket_int+0x88>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d90c      	bls.n	8004a70 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	799b      	ldrb	r3, [r3, #6]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d108      	bne.n	8004a70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	f002 fff2 	bl	8007a54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	4f54300a 	.word	0x4f54300a

08004a80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a9e:	883b      	ldrh	r3, [r7, #0]
 8004aa0:	0419      	lsls	r1, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004aac:	e028      	b.n	8004b00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	4413      	add	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	e00d      	b.n	8004ade <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	3340      	adds	r3, #64	@ 0x40
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	3301      	adds	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3ec      	bcc.n	8004ac2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ae8:	883b      	ldrh	r3, [r7, #0]
 8004aea:	0418      	lsls	r0, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	4302      	orrs	r2, r0
 8004af8:	3340      	adds	r3, #64	@ 0x40
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e267      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d075      	beq.n	8004c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b66:	4b88      	ldr	r3, [pc, #544]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00c      	beq.n	8004b8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b72:	4b85      	ldr	r3, [pc, #532]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d112      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7e:	4b82      	ldr	r3, [pc, #520]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05b      	beq.n	8004c50 <HAL_RCC_OscConfig+0x108>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d157      	bne.n	8004c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e242      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0x74>
 8004bae:	4b76      	ldr	r3, [pc, #472]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a75      	ldr	r2, [pc, #468]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x98>
 8004bc6:	4b70      	ldr	r3, [pc, #448]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6f      	ldr	r2, [pc, #444]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004be0:	4b69      	ldr	r3, [pc, #420]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a68      	ldr	r2, [pc, #416]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b66      	ldr	r3, [pc, #408]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a65      	ldr	r2, [pc, #404]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7fd f946 	bl	8001e90 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fd f942 	bl	8001e90 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	@ 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e207      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0xc0>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c28:	f7fd f932 	bl	8001e90 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fd f92e 	bl	8001e90 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	@ 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e1f3      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c42:	4b51      	ldr	r3, [pc, #324]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0xe8>
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d063      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c6a:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d11c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c76:	4b44      	ldr	r3, [pc, #272]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d116      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	4b41      	ldr	r3, [pc, #260]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCC_OscConfig+0x152>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e1c7      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4937      	ldr	r1, [pc, #220]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cae:	e03a      	b.n	8004d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb8:	4b34      	ldr	r3, [pc, #208]	@ (8004d8c <HAL_RCC_OscConfig+0x244>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fd f8e7 	bl	8001e90 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc6:	f7fd f8e3 	bl	8001e90 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e1a8      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce4:	4b28      	ldr	r3, [pc, #160]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4925      	ldr	r1, [pc, #148]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
 8004cf8:	e015      	b.n	8004d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <HAL_RCC_OscConfig+0x244>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd f8c6 	bl	8001e90 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d08:	f7fd f8c2 	bl	8001e90 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e187      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d036      	beq.n	8004da0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d3a:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <HAL_RCC_OscConfig+0x248>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd f8a6 	bl	8001e90 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fd f8a2 	bl	8001e90 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e167      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x200>
 8004d66:	e01b      	b.n	8004da0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d68:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <HAL_RCC_OscConfig+0x248>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6e:	f7fd f88f 	bl	8001e90 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d74:	e00e      	b.n	8004d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fd f88b 	bl	8001e90 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d907      	bls.n	8004d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e150      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	42470000 	.word	0x42470000
 8004d90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d94:	4b88      	ldr	r3, [pc, #544]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ea      	bne.n	8004d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8097 	beq.w	8004edc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db2:	4b81      	ldr	r3, [pc, #516]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dce:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b77      	ldr	r3, [pc, #476]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d118      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	4b74      	ldr	r3, [pc, #464]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df6:	f7fd f84b 	bl	8001e90 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfe:	f7fd f847 	bl	8001e90 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e10c      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	4b6a      	ldr	r3, [pc, #424]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2ea>
 8004e24:	4b64      	ldr	r3, [pc, #400]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	4a63      	ldr	r2, [pc, #396]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e30:	e01c      	b.n	8004e6c <HAL_RCC_OscConfig+0x324>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x30c>
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e46:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e52:	e00b      	b.n	8004e6c <HAL_RCC_OscConfig+0x324>
 8004e54:	4b58      	ldr	r3, [pc, #352]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e58:	4a57      	ldr	r2, [pc, #348]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e60:	4b55      	ldr	r3, [pc, #340]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a54      	ldr	r2, [pc, #336]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e66:	f023 0304 	bic.w	r3, r3, #4
 8004e6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fd f80c 	bl	8001e90 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fd f808 	bl	8001e90 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0cb      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e92:	4b49      	ldr	r3, [pc, #292]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ee      	beq.n	8004e7c <HAL_RCC_OscConfig+0x334>
 8004e9e:	e014      	b.n	8004eca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea0:	f7fc fff6 	bl	8001e90 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea8:	f7fc fff2 	bl	8001e90 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e0b5      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ee      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	4a38      	ldr	r2, [pc, #224]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a1 	beq.w	8005028 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ee6:	4b34      	ldr	r3, [pc, #208]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d05c      	beq.n	8004fac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d141      	bne.n	8004f7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b31      	ldr	r3, [pc, #196]	@ (8004fc0 <HAL_RCC_OscConfig+0x478>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fc ffc6 	bl	8001e90 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fc ffc2 	bl	8001e90 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e087      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	491b      	ldr	r1, [pc, #108]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f50:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x478>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7fc ff9b 	bl	8001e90 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5e:	f7fc ff97 	bl	8001e90 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e05c      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f70:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x416>
 8004f7c:	e054      	b.n	8005028 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <HAL_RCC_OscConfig+0x478>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7fc ff84 	bl	8001e90 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fc ff80 	bl	8001e90 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e045      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x444>
 8004faa:	e03d      	b.n	8005028 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e038      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <HAL_RCC_OscConfig+0x4ec>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d028      	beq.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d121      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d11a      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	3b01      	subs	r3, #1
 800500e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d107      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800

08005038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0cc      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800504c:	4b68      	ldr	r3, [pc, #416]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d90c      	bls.n	8005074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b65      	ldr	r3, [pc, #404]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b63      	ldr	r3, [pc, #396]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0b8      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800508c:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4a58      	ldr	r2, [pc, #352]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a4:	4b53      	ldr	r3, [pc, #332]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a52      	ldr	r2, [pc, #328]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b0:	4b50      	ldr	r3, [pc, #320]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	494d      	ldr	r1, [pc, #308]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d044      	beq.n	8005158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d119      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e07f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d003      	beq.n	80050f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f6:	4b3f      	ldr	r3, [pc, #252]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e06f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005106:	4b3b      	ldr	r3, [pc, #236]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e067      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005116:	4b37      	ldr	r3, [pc, #220]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f023 0203 	bic.w	r2, r3, #3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	4934      	ldr	r1, [pc, #208]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005128:	f7fc feb2 	bl	8001e90 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	e00a      	b.n	8005146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005130:	f7fc feae 	bl	8001e90 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e04f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	4b2b      	ldr	r3, [pc, #172]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 020c 	and.w	r2, r3, #12
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	429a      	cmp	r2, r3
 8005156:	d1eb      	bne.n	8005130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005158:	4b25      	ldr	r3, [pc, #148]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d20c      	bcs.n	8005180 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b22      	ldr	r3, [pc, #136]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b20      	ldr	r3, [pc, #128]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e032      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800518c:	4b19      	ldr	r3, [pc, #100]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4916      	ldr	r1, [pc, #88]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051aa:	4b12      	ldr	r3, [pc, #72]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	490e      	ldr	r1, [pc, #56]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051be:	f000 f821 	bl	8005204 <HAL_RCC_GetSysClockFreq>
 80051c2:	4602      	mov	r2, r0
 80051c4:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	490a      	ldr	r1, [pc, #40]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	5ccb      	ldrb	r3, [r1, r3]
 80051d2:	fa22 f303 	lsr.w	r3, r2, r3
 80051d6:	4a09      	ldr	r2, [pc, #36]	@ (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051da:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <HAL_RCC_ClockConfig+0x1c8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc fe12 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023c00 	.word	0x40023c00
 80051f4:	40023800 	.word	0x40023800
 80051f8:	0800a604 	.word	0x0800a604
 80051fc:	20000004 	.word	0x20000004
 8005200:	20000008 	.word	0x20000008

08005204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b094      	sub	sp, #80	@ 0x50
 800520a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800521c:	4b79      	ldr	r3, [pc, #484]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d00d      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x40>
 8005228:	2b08      	cmp	r3, #8
 800522a:	f200 80e1 	bhi.w	80053f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x34>
 8005232:	2b04      	cmp	r3, #4
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x3a>
 8005236:	e0db      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b73      	ldr	r3, [pc, #460]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800523c:	e0db      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800523e:	4b73      	ldr	r3, [pc, #460]	@ (800540c <HAL_RCC_GetSysClockFreq+0x208>)
 8005240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005242:	e0d8      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005244:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800524c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800524e:	4b6d      	ldr	r3, [pc, #436]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d063      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	2200      	movs	r2, #0
 8005262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005264:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
 800526e:	2300      	movs	r3, #0
 8005270:	637b      	str	r3, [r7, #52]	@ 0x34
 8005272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005276:	4622      	mov	r2, r4
 8005278:	462b      	mov	r3, r5
 800527a:	f04f 0000 	mov.w	r0, #0
 800527e:	f04f 0100 	mov.w	r1, #0
 8005282:	0159      	lsls	r1, r3, #5
 8005284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005288:	0150      	lsls	r0, r2, #5
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4621      	mov	r1, r4
 8005290:	1a51      	subs	r1, r2, r1
 8005292:	6139      	str	r1, [r7, #16]
 8005294:	4629      	mov	r1, r5
 8005296:	eb63 0301 	sbc.w	r3, r3, r1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052a8:	4659      	mov	r1, fp
 80052aa:	018b      	lsls	r3, r1, #6
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052b2:	4651      	mov	r1, sl
 80052b4:	018a      	lsls	r2, r1, #6
 80052b6:	4651      	mov	r1, sl
 80052b8:	ebb2 0801 	subs.w	r8, r2, r1
 80052bc:	4659      	mov	r1, fp
 80052be:	eb63 0901 	sbc.w	r9, r3, r1
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052d6:	4690      	mov	r8, r2
 80052d8:	4699      	mov	r9, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	eb18 0303 	adds.w	r3, r8, r3
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	462b      	mov	r3, r5
 80052e4:	eb49 0303 	adc.w	r3, r9, r3
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052f6:	4629      	mov	r1, r5
 80052f8:	024b      	lsls	r3, r1, #9
 80052fa:	4621      	mov	r1, r4
 80052fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005300:	4621      	mov	r1, r4
 8005302:	024a      	lsls	r2, r1, #9
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530a:	2200      	movs	r2, #0
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005314:	f7fb fc1e 	bl	8000b54 <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4613      	mov	r3, r2
 800531e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005320:	e058      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005322:	4b38      	ldr	r3, [pc, #224]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	2200      	movs	r2, #0
 800532a:	4618      	mov	r0, r3
 800532c:	4611      	mov	r1, r2
 800532e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005332:	623b      	str	r3, [r7, #32]
 8005334:	2300      	movs	r3, #0
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
 8005338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534e:	0150      	lsls	r0, r2, #5
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4641      	mov	r1, r8
 8005356:	ebb2 0a01 	subs.w	sl, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800536c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005374:	ebb2 040a 	subs.w	r4, r2, sl
 8005378:	eb63 050b 	sbc.w	r5, r3, fp
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	00eb      	lsls	r3, r5, #3
 8005386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800538a:	00e2      	lsls	r2, r4, #3
 800538c:	4614      	mov	r4, r2
 800538e:	461d      	mov	r5, r3
 8005390:	4643      	mov	r3, r8
 8005392:	18e3      	adds	r3, r4, r3
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	464b      	mov	r3, r9
 8005398:	eb45 0303 	adc.w	r3, r5, r3
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053aa:	4629      	mov	r1, r5
 80053ac:	028b      	lsls	r3, r1, #10
 80053ae:	4621      	mov	r1, r4
 80053b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053b4:	4621      	mov	r1, r4
 80053b6:	028a      	lsls	r2, r1, #10
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053be:	2200      	movs	r2, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	61fa      	str	r2, [r7, #28]
 80053c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c8:	f7fb fbc4 	bl	8000b54 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	3301      	adds	r3, #1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3750      	adds	r7, #80	@ 0x50
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800
 8005408:	00f42400 	.word	0x00f42400
 800540c:	007a1200 	.word	0x007a1200

08005410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <HAL_RCC_GetHCLKFreq+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000004 	.word	0x20000004

08005428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e041      	b.n	80054be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc fb7c 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f000 fc3e 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e041      	b.n	800555c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f839 	bl	8005564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f000 fbef 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <HAL_TIM_PWM_Start_IT+0x28>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e022      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x6e>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d109      	bne.n	80055ba <HAL_TIM_PWM_Start_IT+0x42>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	bf14      	ite	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	2300      	moveq	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	e015      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x6e>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start_IT+0x5c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e008      	b.n	80055e6 <HAL_TIM_PWM_Start_IT+0x6e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0c7      	b.n	800577e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start_IT+0x86>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055fc:	e013      	b.n	8005626 <HAL_TIM_PWM_Start_IT+0xae>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start_IT+0x96>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800560c:	e00b      	b.n	8005626 <HAL_TIM_PWM_Start_IT+0xae>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start_IT+0xa6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800561c:	e003      	b.n	8005626 <HAL_TIM_PWM_Start_IT+0xae>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b0c      	cmp	r3, #12
 800562a:	d841      	bhi.n	80056b0 <HAL_TIM_PWM_Start_IT+0x138>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <HAL_TIM_PWM_Start_IT+0xbc>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005669 	.word	0x08005669
 8005638:	080056b1 	.word	0x080056b1
 800563c:	080056b1 	.word	0x080056b1
 8005640:	080056b1 	.word	0x080056b1
 8005644:	0800567b 	.word	0x0800567b
 8005648:	080056b1 	.word	0x080056b1
 800564c:	080056b1 	.word	0x080056b1
 8005650:	080056b1 	.word	0x080056b1
 8005654:	0800568d 	.word	0x0800568d
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056b1 	.word	0x080056b1
 8005660:	080056b1 	.word	0x080056b1
 8005664:	0800569f 	.word	0x0800569f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0202 	orr.w	r2, r2, #2
 8005676:	60da      	str	r2, [r3, #12]
      break;
 8005678:	e01d      	b.n	80056b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0204 	orr.w	r2, r2, #4
 8005688:	60da      	str	r2, [r3, #12]
      break;
 800568a:	e014      	b.n	80056b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	60da      	str	r2, [r3, #12]
      break;
 800569c:	e00b      	b.n	80056b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0210 	orr.w	r2, r2, #16
 80056ac:	60da      	str	r2, [r3, #12]
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d15f      	bne.n	800577c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fe05 	bl	80062d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <HAL_TIM_PWM_Start_IT+0x210>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIM_PWM_Start_IT+0x166>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2c      	ldr	r2, [pc, #176]	@ (800578c <HAL_TIM_PWM_Start_IT+0x214>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_PWM_Start_IT+0x16a>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <HAL_TIM_PWM_Start_IT+0x16c>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a22      	ldr	r2, [pc, #136]	@ (8005788 <HAL_TIM_PWM_Start_IT+0x210>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d022      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570a:	d01d      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1f      	ldr	r2, [pc, #124]	@ (8005790 <HAL_TIM_PWM_Start_IT+0x218>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d018      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1e      	ldr	r2, [pc, #120]	@ (8005794 <HAL_TIM_PWM_Start_IT+0x21c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d013      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1c      	ldr	r2, [pc, #112]	@ (8005798 <HAL_TIM_PWM_Start_IT+0x220>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	@ (800578c <HAL_TIM_PWM_Start_IT+0x214>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d009      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a18      	ldr	r2, [pc, #96]	@ (800579c <HAL_TIM_PWM_Start_IT+0x224>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0x1d0>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a17      	ldr	r2, [pc, #92]	@ (80057a0 <HAL_TIM_PWM_Start_IT+0x228>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d111      	bne.n	800576c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d010      	beq.n	800577c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	e007      	b.n	800577c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40014000 	.word	0x40014000
 80057a0:	40001800 	.word	0x40001800

080057a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d020      	beq.n	8005808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01b      	beq.n	8005808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0202 	mvn.w	r2, #2
 80057d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa65 	bl	8005cbe <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa57 	bl	8005caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fc f8b3 	bl	8001968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d020      	beq.n	8005854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01b      	beq.n	8005854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0204 	mvn.w	r2, #4
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa3f 	bl	8005cbe <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa31 	bl	8005caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fc f88d 	bl	8001968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0208 	mvn.w	r2, #8
 8005870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa19 	bl	8005cbe <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa0b 	bl	8005caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fc f867 	bl	8001968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d020      	beq.n	80058ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2208      	movs	r2, #8
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9f3 	bl	8005cbe <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9e5 	bl	8005caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fc f841 	bl	8001968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00c      	beq.n	8005910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0201 	mvn.w	r2, #1
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f9c3 	bl	8005c96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fdce 	bl	80064d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9bd 	bl	8005cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0220 	mvn.w	r2, #32
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fda0 	bl	80064bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800599e:	2302      	movs	r3, #2
 80059a0:	e0ae      	b.n	8005b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	f200 809f 	bhi.w	8005af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059b2:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005af1 	.word	0x08005af1
 80059c0:	08005af1 	.word	0x08005af1
 80059c4:	08005af1 	.word	0x08005af1
 80059c8:	08005a2d 	.word	0x08005a2d
 80059cc:	08005af1 	.word	0x08005af1
 80059d0:	08005af1 	.word	0x08005af1
 80059d4:	08005af1 	.word	0x08005af1
 80059d8:	08005a6f 	.word	0x08005a6f
 80059dc:	08005af1 	.word	0x08005af1
 80059e0:	08005af1 	.word	0x08005af1
 80059e4:	08005af1 	.word	0x08005af1
 80059e8:	08005aaf 	.word	0x08005aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fa24 	bl	8005e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0208 	orr.w	r2, r2, #8
 8005a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0204 	bic.w	r2, r2, #4
 8005a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	619a      	str	r2, [r3, #24]
      break;
 8005a2a:	e064      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa74 	bl	8005f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
      break;
 8005a6c:	e043      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fac9 	bl	800600c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0204 	bic.w	r2, r2, #4
 8005a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	61da      	str	r2, [r3, #28]
      break;
 8005aac:	e023      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fb1d 	bl	80060f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	021a      	lsls	r2, r3, #8
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	61da      	str	r2, [r3, #28]
      break;
 8005aee:	e002      	b.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	75fb      	strb	r3, [r7, #23]
      break;
 8005af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIM_ConfigClockSource+0x1c>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0b4      	b.n	8005c8e <HAL_TIM_ConfigClockSource+0x186>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5c:	d03e      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0xd4>
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	f200 8087 	bhi.w	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6a:	f000 8086 	beq.w	8005c7a <HAL_TIM_ConfigClockSource+0x172>
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b72:	d87f      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b74:	2b70      	cmp	r3, #112	@ 0x70
 8005b76:	d01a      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0xa6>
 8005b78:	2b70      	cmp	r3, #112	@ 0x70
 8005b7a:	d87b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b7c:	2b60      	cmp	r3, #96	@ 0x60
 8005b7e:	d050      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0x11a>
 8005b80:	2b60      	cmp	r3, #96	@ 0x60
 8005b82:	d877      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b84:	2b50      	cmp	r3, #80	@ 0x50
 8005b86:	d03c      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0xfa>
 8005b88:	2b50      	cmp	r3, #80	@ 0x50
 8005b8a:	d873      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b8c:	2b40      	cmp	r3, #64	@ 0x40
 8005b8e:	d058      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x13a>
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d86f      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b30      	cmp	r3, #48	@ 0x30
 8005b96:	d064      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x15a>
 8005b98:	2b30      	cmp	r3, #48	@ 0x30
 8005b9a:	d86b      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d060      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d867      	bhi.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d05c      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d05a      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x15a>
 8005bac:	e062      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bbe:	f000 fb69 	bl	8006294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	609a      	str	r2, [r3, #8]
      break;
 8005bda:	e04f      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bec:	f000 fb52 	bl	8006294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bfe:	609a      	str	r2, [r3, #8]
      break;
 8005c00:	e03c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f000 fac6 	bl	80061a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2150      	movs	r1, #80	@ 0x50
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fb1f 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005c20:	e02c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 fae5 	bl	80061fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2160      	movs	r1, #96	@ 0x60
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fb0f 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005c40:	e01c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 faa6 	bl	80061a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2140      	movs	r1, #64	@ 0x40
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 faff 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005c60:	e00c      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f000 faf6 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005c72:	e003      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e000      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a46      	ldr	r2, [pc, #280]	@ (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a43      	ldr	r2, [pc, #268]	@ (8005e18 <TIM_Base_SetConfig+0x130>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a42      	ldr	r2, [pc, #264]	@ (8005e1c <TIM_Base_SetConfig+0x134>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a41      	ldr	r2, [pc, #260]	@ (8005e20 <TIM_Base_SetConfig+0x138>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a40      	ldr	r2, [pc, #256]	@ (8005e24 <TIM_Base_SetConfig+0x13c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a35      	ldr	r2, [pc, #212]	@ (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d02b      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d48:	d027      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a32      	ldr	r2, [pc, #200]	@ (8005e18 <TIM_Base_SetConfig+0x130>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d023      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a31      	ldr	r2, [pc, #196]	@ (8005e1c <TIM_Base_SetConfig+0x134>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01f      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a30      	ldr	r2, [pc, #192]	@ (8005e20 <TIM_Base_SetConfig+0x138>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01b      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2f      	ldr	r2, [pc, #188]	@ (8005e24 <TIM_Base_SetConfig+0x13c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d017      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e28 <TIM_Base_SetConfig+0x140>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	@ (8005e2c <TIM_Base_SetConfig+0x144>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00f      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e30 <TIM_Base_SetConfig+0x148>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2b      	ldr	r2, [pc, #172]	@ (8005e34 <TIM_Base_SetConfig+0x14c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005e38 <TIM_Base_SetConfig+0x150>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a29      	ldr	r2, [pc, #164]	@ (8005e3c <TIM_Base_SetConfig+0x154>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d108      	bne.n	8005dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a10      	ldr	r2, [pc, #64]	@ (8005e14 <TIM_Base_SetConfig+0x12c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_Base_SetConfig+0xf8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a12      	ldr	r2, [pc, #72]	@ (8005e24 <TIM_Base_SetConfig+0x13c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d103      	bne.n	8005de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f023 0201 	bic.w	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	611a      	str	r2, [r3, #16]
  }
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40010400 	.word	0x40010400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400
 8005e30:	40014800 	.word	0x40014800
 8005e34:	40001800 	.word	0x40001800
 8005e38:	40001c00 	.word	0x40001c00
 8005e3c:	40002000 	.word	0x40002000

08005e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f023 0201 	bic.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0302 	bic.w	r3, r3, #2
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a20      	ldr	r2, [pc, #128]	@ (8005f18 <TIM_OC1_SetConfig+0xd8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC1_SetConfig+0x64>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <TIM_OC1_SetConfig+0xdc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0308 	bic.w	r3, r3, #8
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 0304 	bic.w	r3, r3, #4
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	@ (8005f18 <TIM_OC1_SetConfig+0xd8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d003      	beq.n	8005ece <TIM_OC1_SetConfig+0x8e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a14      	ldr	r2, [pc, #80]	@ (8005f1c <TIM_OC1_SetConfig+0xdc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d111      	bne.n	8005ef2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40010400 	.word	0x40010400

08005f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	f023 0210 	bic.w	r2, r3, #16
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0320 	bic.w	r3, r3, #32
 8005f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <TIM_OC2_SetConfig+0xe4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC2_SetConfig+0x68>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a21      	ldr	r2, [pc, #132]	@ (8006008 <TIM_OC2_SetConfig+0xe8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10d      	bne.n	8005fa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <TIM_OC2_SetConfig+0xe4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC2_SetConfig+0x94>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_OC2_SetConfig+0xe8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d113      	bne.n	8005fdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400

0800600c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0303 	bic.w	r3, r3, #3
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a21      	ldr	r2, [pc, #132]	@ (80060ec <TIM_OC3_SetConfig+0xe0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC3_SetConfig+0x66>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <TIM_OC3_SetConfig+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10d      	bne.n	800608e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800608c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <TIM_OC3_SetConfig+0xe0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_OC3_SetConfig+0x92>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a15      	ldr	r2, [pc, #84]	@ (80060f0 <TIM_OC3_SetConfig+0xe4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d113      	bne.n	80060c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40010400 	.word	0x40010400

080060f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800612a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a12      	ldr	r2, [pc, #72]	@ (8006198 <TIM_OC4_SetConfig+0xa4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC4_SetConfig+0x68>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a11      	ldr	r2, [pc, #68]	@ (800619c <TIM_OC4_SetConfig+0xa8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d109      	bne.n	8006170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000
 800619c:	40010400 	.word	0x40010400

080061a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 030a 	bic.w	r3, r3, #10
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fe:	b480      	push	{r7}
 8006200:	b087      	sub	sp, #28
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f023 0210 	bic.w	r2, r3, #16
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	031b      	lsls	r3, r3, #12
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800623a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	f043 0307 	orr.w	r3, r3, #7
 8006280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	021a      	lsls	r2, r3, #8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	609a      	str	r2, [r3, #8]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	2201      	movs	r2, #1
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	401a      	ands	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e05a      	b.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a21      	ldr	r2, [pc, #132]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d022      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006384:	d01d      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1d      	ldr	r2, [pc, #116]	@ (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1a      	ldr	r2, [pc, #104]	@ (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a18      	ldr	r2, [pc, #96]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a17      	ldr	r2, [pc, #92]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a15      	ldr	r2, [pc, #84]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10c      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40010400 	.word	0x40010400
 8006410:	40014000 	.word	0x40014000
 8006414:	40001800 	.word	0x40001800

08006418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006430:	2302      	movs	r3, #2
 8006432:	e03d      	b.n	80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064e4:	b084      	sub	sp, #16
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	f107 001c 	add.w	r0, r7, #28
 80064f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d123      	bne.n	8006546 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006502:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006526:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 fae8 	bl	8007b10 <USB_CoreReset>
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e01b      	b.n	800657e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fadc 	bl	8007b10 <USB_CoreReset>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800655c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006570:	e005      	b.n	800657e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006576:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800657e:	7fbb      	ldrb	r3, [r7, #30]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10b      	bne.n	800659c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f043 0206 	orr.w	r2, r3, #6
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065a8:	b004      	add	sp, #16
 80065aa:	4770      	bx	lr

080065ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d165      	bne.n	800668c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4a41      	ldr	r2, [pc, #260]	@ (80066c8 <USB_SetTurnaroundTime+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d906      	bls.n	80065d6 <USB_SetTurnaroundTime+0x2a>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a40      	ldr	r2, [pc, #256]	@ (80066cc <USB_SetTurnaroundTime+0x120>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d202      	bcs.n	80065d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065d0:	230f      	movs	r3, #15
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e062      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4a3c      	ldr	r2, [pc, #240]	@ (80066cc <USB_SetTurnaroundTime+0x120>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d306      	bcc.n	80065ec <USB_SetTurnaroundTime+0x40>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4a3b      	ldr	r2, [pc, #236]	@ (80066d0 <USB_SetTurnaroundTime+0x124>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d202      	bcs.n	80065ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065e6:	230e      	movs	r3, #14
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e057      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4a38      	ldr	r2, [pc, #224]	@ (80066d0 <USB_SetTurnaroundTime+0x124>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d306      	bcc.n	8006602 <USB_SetTurnaroundTime+0x56>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4a37      	ldr	r2, [pc, #220]	@ (80066d4 <USB_SetTurnaroundTime+0x128>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d202      	bcs.n	8006602 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80065fc:	230d      	movs	r3, #13
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e04c      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a33      	ldr	r2, [pc, #204]	@ (80066d4 <USB_SetTurnaroundTime+0x128>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d306      	bcc.n	8006618 <USB_SetTurnaroundTime+0x6c>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4a32      	ldr	r2, [pc, #200]	@ (80066d8 <USB_SetTurnaroundTime+0x12c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d802      	bhi.n	8006618 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006612:	230c      	movs	r3, #12
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e041      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a2f      	ldr	r2, [pc, #188]	@ (80066d8 <USB_SetTurnaroundTime+0x12c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d906      	bls.n	800662e <USB_SetTurnaroundTime+0x82>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a2e      	ldr	r2, [pc, #184]	@ (80066dc <USB_SetTurnaroundTime+0x130>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d802      	bhi.n	800662e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006628:	230b      	movs	r3, #11
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	e036      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a2a      	ldr	r2, [pc, #168]	@ (80066dc <USB_SetTurnaroundTime+0x130>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d906      	bls.n	8006644 <USB_SetTurnaroundTime+0x98>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a29      	ldr	r2, [pc, #164]	@ (80066e0 <USB_SetTurnaroundTime+0x134>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d802      	bhi.n	8006644 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800663e:	230a      	movs	r3, #10
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	e02b      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a26      	ldr	r2, [pc, #152]	@ (80066e0 <USB_SetTurnaroundTime+0x134>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d906      	bls.n	800665a <USB_SetTurnaroundTime+0xae>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4a25      	ldr	r2, [pc, #148]	@ (80066e4 <USB_SetTurnaroundTime+0x138>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d202      	bcs.n	800665a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006654:	2309      	movs	r3, #9
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e020      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4a21      	ldr	r2, [pc, #132]	@ (80066e4 <USB_SetTurnaroundTime+0x138>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d306      	bcc.n	8006670 <USB_SetTurnaroundTime+0xc4>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4a20      	ldr	r2, [pc, #128]	@ (80066e8 <USB_SetTurnaroundTime+0x13c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d802      	bhi.n	8006670 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800666a:	2308      	movs	r3, #8
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e015      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <USB_SetTurnaroundTime+0x13c>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d906      	bls.n	8006686 <USB_SetTurnaroundTime+0xda>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ec <USB_SetTurnaroundTime+0x140>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d202      	bcs.n	8006686 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006680:	2307      	movs	r3, #7
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e00a      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006686:	2306      	movs	r3, #6
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e007      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d102      	bne.n	8006698 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006692:	2309      	movs	r3, #9
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	e001      	b.n	800669c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006698:	2309      	movs	r3, #9
 800669a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	029b      	lsls	r3, r3, #10
 80066b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80066b4:	431a      	orrs	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	00d8acbf 	.word	0x00d8acbf
 80066cc:	00e4e1c0 	.word	0x00e4e1c0
 80066d0:	00f42400 	.word	0x00f42400
 80066d4:	01067380 	.word	0x01067380
 80066d8:	011a499f 	.word	0x011a499f
 80066dc:	01312cff 	.word	0x01312cff
 80066e0:	014ca43f 	.word	0x014ca43f
 80066e4:	016e3600 	.word	0x016e3600
 80066e8:	01a6ab1f 	.word	0x01a6ab1f
 80066ec:	01e84800 	.word	0x01e84800

080066f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f043 0201 	orr.w	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d115      	bne.n	8006782 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006762:	200a      	movs	r0, #10
 8006764:	f7fb fba0 	bl	8001ea8 <HAL_Delay>
      ms += 10U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	330a      	adds	r3, #10
 800676c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 f93f 	bl	80079f2 <USB_GetMode>
 8006774:	4603      	mov	r3, r0
 8006776:	2b01      	cmp	r3, #1
 8006778:	d01e      	beq.n	80067b8 <USB_SetCurrentMode+0x84>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2bc7      	cmp	r3, #199	@ 0xc7
 800677e:	d9f0      	bls.n	8006762 <USB_SetCurrentMode+0x2e>
 8006780:	e01a      	b.n	80067b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d115      	bne.n	80067b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006794:	200a      	movs	r0, #10
 8006796:	f7fb fb87 	bl	8001ea8 <HAL_Delay>
      ms += 10U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	330a      	adds	r3, #10
 800679e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f926 	bl	80079f2 <USB_GetMode>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <USB_SetCurrentMode+0x84>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80067b0:	d9f0      	bls.n	8006794 <USB_SetCurrentMode+0x60>
 80067b2:	e001      	b.n	80067b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e005      	b.n	80067c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80067bc:	d101      	bne.n	80067c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067cc:	b084      	sub	sp, #16
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80067da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	e009      	b.n	8006800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3340      	adds	r3, #64	@ 0x40
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	2200      	movs	r2, #0
 80067f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	3301      	adds	r3, #1
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	2b0e      	cmp	r3, #14
 8006804:	d9f2      	bls.n	80067ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006806:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11c      	bne.n	8006848 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006826:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006832:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	639a      	str	r2, [r3, #56]	@ 0x38
 8006846:	e00b      	b.n	8006860 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006866:	461a      	mov	r2, r3
 8006868:	2300      	movs	r3, #0
 800686a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800686c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10d      	bne.n	8006890 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f968 	bl	8006b54 <USB_SetDevSpeed>
 8006884:	e008      	b.n	8006898 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006886:	2101      	movs	r1, #1
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f963 	bl	8006b54 <USB_SetDevSpeed>
 800688e:	e003      	b.n	8006898 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006890:	2103      	movs	r1, #3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f95e 	bl	8006b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006898:	2110      	movs	r1, #16
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8fa 	bl	8006a94 <USB_FlushTxFifo>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f924 	bl	8006af8 <USB_FlushRxFifo>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c0:	461a      	mov	r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068de:	2300      	movs	r3, #0
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	e043      	b.n	800696c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068fa:	d118      	bne.n	800692e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10a      	bne.n	8006918 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690e:	461a      	mov	r2, r3
 8006910:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e013      	b.n	8006940 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006924:	461a      	mov	r2, r3
 8006926:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	e008      	b.n	8006940 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693a:	461a      	mov	r2, r3
 800693c:	2300      	movs	r3, #0
 800693e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694c:	461a      	mov	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695e:	461a      	mov	r2, r3
 8006960:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006964:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3301      	adds	r3, #1
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006970:	461a      	mov	r2, r3
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4293      	cmp	r3, r2
 8006976:	d3b5      	bcc.n	80068e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006978:	2300      	movs	r3, #0
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	e043      	b.n	8006a06 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006994:	d118      	bne.n	80069c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a8:	461a      	mov	r2, r3
 80069aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e013      	b.n	80069da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e008      	b.n	80069da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d4:	461a      	mov	r2, r3
 80069d6:	2300      	movs	r3, #0
 80069d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e6:	461a      	mov	r2, r3
 80069e8:	2300      	movs	r3, #0
 80069ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f8:	461a      	mov	r2, r3
 80069fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	3301      	adds	r3, #1
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d3b5      	bcc.n	800697e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006a32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f043 0210 	orr.w	r2, r3, #16
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699a      	ldr	r2, [r3, #24]
 8006a4c:	4b10      	ldr	r3, [pc, #64]	@ (8006a90 <USB_DevInit+0x2c4>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f043 0208 	orr.w	r2, r3, #8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d107      	bne.n	8006a80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a78:	f043 0304 	orr.w	r3, r3, #4
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a8c:	b004      	add	sp, #16
 8006a8e:	4770      	bx	lr
 8006a90:	803c3800 	.word	0x803c3800

08006a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aae:	d901      	bls.n	8006ab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e01b      	b.n	8006aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	daf2      	bge.n	8006aa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	019b      	lsls	r3, r3, #6
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ad8:	d901      	bls.n	8006ade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e006      	b.n	8006aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d0f0      	beq.n	8006acc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b10:	d901      	bls.n	8006b16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e018      	b.n	8006b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	daf2      	bge.n	8006b04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2210      	movs	r2, #16
 8006b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b34:	d901      	bls.n	8006b3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e006      	b.n	8006b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b10      	cmp	r3, #16
 8006b44:	d0f0      	beq.n	8006b28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b087      	sub	sp, #28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0306 	and.w	r3, r3, #6
 8006b9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]
 8006baa:	e00a      	b.n	8006bc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d002      	beq.n	8006bb8 <USB_GetDevSpeed+0x32>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	d102      	bne.n	8006bbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	75fb      	strb	r3, [r7, #23]
 8006bbc:	e001      	b.n	8006bc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bbe:	230f      	movs	r3, #15
 8006bc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d13a      	bne.n	8006c62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d155      	bne.n	8006cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	059b      	lsls	r3, r3, #22
 8006c46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e036      	b.n	8006cd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	2101      	movs	r1, #1
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11a      	bne.n	8006cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	791b      	ldrb	r3, [r3, #4]
 8006cb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d161      	bne.n	8006dc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d12:	d11f      	bne.n	8006d54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	2101      	movs	r1, #1
 8006d66:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d74:	4013      	ands	r3, r2
 8006d76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	2101      	movs	r1, #1
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	43db      	mvns	r3, r3
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d98:	4013      	ands	r3, r2
 8006d9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0159      	lsls	r1, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	440b      	add	r3, r1
 8006db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db6:	4619      	mov	r1, r3
 8006db8:	4b35      	ldr	r3, [pc, #212]	@ (8006e90 <USB_DeactivateEndpoint+0x1b0>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	e060      	b.n	8006e82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dd6:	d11f      	bne.n	8006e18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006df6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	43db      	mvns	r3, r3
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e38:	4013      	ands	r3, r2
 8006e3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	43db      	mvns	r3, r3
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	0159      	lsls	r1, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <USB_DeactivateEndpoint+0x1b4>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	ec337800 	.word	0xec337800
 8006e94:	eff37800 	.word	0xeff37800

08006e98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	@ 0x28
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 817f 	bne.w	80071b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d132      	bne.n	8006f28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006edc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ee0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f20:	0cdb      	lsrs	r3, r3, #19
 8006f22:	04db      	lsls	r3, r3, #19
 8006f24:	6113      	str	r3, [r2, #16]
 8006f26:	e097      	b.n	8007058 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f42:	0cdb      	lsrs	r3, r3, #19
 8006f44:	04db      	lsls	r3, r3, #19
 8006f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f62:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f66:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f6a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d11a      	bne.n	8006fa8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d903      	bls.n	8006f86 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	0151      	lsls	r1, r2, #5
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	440a      	add	r2, r1
 8006f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fa4:	6113      	str	r3, [r2, #16]
 8006fa6:	e044      	b.n	8007032 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	1e5a      	subs	r2, r3, #1
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	8afb      	ldrh	r3, [r7, #22]
 8006fce:	04d9      	lsls	r1, r3, #19
 8006fd0:	4ba4      	ldr	r3, [pc, #656]	@ (8007264 <USB_EPStartXfer+0x3cc>)
 8006fd2:	400b      	ands	r3, r1
 8006fd4:	69b9      	ldr	r1, [r7, #24]
 8006fd6:	0148      	lsls	r0, r1, #5
 8006fd8:	69f9      	ldr	r1, [r7, #28]
 8006fda:	4401      	add	r1, r0
 8006fdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d122      	bne.n	8007032 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007006:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800700a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	8afb      	ldrh	r3, [r7, #22]
 800701c:	075b      	lsls	r3, r3, #29
 800701e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007022:	69b9      	ldr	r1, [r7, #24]
 8007024:	0148      	lsls	r0, r1, #5
 8007026:	69f9      	ldr	r1, [r7, #28]
 8007028:	4401      	add	r1, r0
 800702a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800702e:	4313      	orrs	r3, r2
 8007030:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	0148      	lsls	r0, r1, #5
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	4401      	add	r1, r0
 8007050:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d14b      	bne.n	80070f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007072:	461a      	mov	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d128      	bne.n	80070d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708e:	2b00      	cmp	r3, #0
 8007090:	d110      	bne.n	80070b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e00f      	b.n	80070d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e166      	b.n	80073c4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007110:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007114:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	791b      	ldrb	r3, [r3, #4]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d015      	beq.n	800714a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 814e 	beq.w	80073c4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	2101      	movs	r1, #1
 800713a:	fa01 f303 	lsl.w	r3, r1, r3
 800713e:	69f9      	ldr	r1, [r7, #28]
 8007140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007144:	4313      	orrs	r3, r2
 8007146:	634b      	str	r3, [r1, #52]	@ 0x34
 8007148:	e13c      	b.n	80073c4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d110      	bne.n	800717c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007174:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e00f      	b.n	800719c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800719a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	68d9      	ldr	r1, [r3, #12]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	b298      	uxth	r0, r3
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	4603      	mov	r3, r0
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f9b9 	bl	8007528 <USB_WritePacket>
 80071b6:	e105      	b.n	80073c4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d2:	0cdb      	lsrs	r3, r3, #19
 80071d4:	04db      	lsls	r3, r3, #19
 80071d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80071f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80071fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d132      	bne.n	8007268 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007230:	69b9      	ldr	r1, [r7, #24]
 8007232:	0148      	lsls	r0, r1, #5
 8007234:	69f9      	ldr	r1, [r7, #28]
 8007236:	4401      	add	r1, r0
 8007238:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800723c:	4313      	orrs	r3, r2
 800723e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	440a      	add	r2, r1
 8007256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800725a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800725e:	6113      	str	r3, [r2, #16]
 8007260:	e062      	b.n	8007328 <USB_EPStartXfer+0x490>
 8007262:	bf00      	nop
 8007264:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d123      	bne.n	80072b8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007286:	69b9      	ldr	r1, [r7, #24]
 8007288:	0148      	lsls	r0, r1, #5
 800728a:	69f9      	ldr	r1, [r7, #28]
 800728c:	4401      	add	r1, r0
 800728e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007292:	4313      	orrs	r3, r2
 8007294:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072b4:	6113      	str	r3, [r2, #16]
 80072b6:	e037      	b.n	8007328 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	1e5a      	subs	r2, r3, #1
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	8afa      	ldrh	r2, [r7, #22]
 80072d4:	fb03 f202 	mul.w	r2, r3, r2
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	8afb      	ldrh	r3, [r7, #22]
 80072ec:	04d9      	lsls	r1, r3, #19
 80072ee:	4b38      	ldr	r3, [pc, #224]	@ (80073d0 <USB_EPStartXfer+0x538>)
 80072f0:	400b      	ands	r3, r1
 80072f2:	69b9      	ldr	r1, [r7, #24]
 80072f4:	0148      	lsls	r0, r1, #5
 80072f6:	69f9      	ldr	r1, [r7, #28]
 80072f8:	4401      	add	r1, r0
 80072fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072fe:	4313      	orrs	r3, r2
 8007300:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007318:	69b9      	ldr	r1, [r7, #24]
 800731a:	0148      	lsls	r0, r1, #5
 800731c:	69f9      	ldr	r1, [r7, #28]
 800731e:	4401      	add	r1, r0
 8007320:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007324:	4313      	orrs	r3, r2
 8007326:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d10d      	bne.n	800734a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	68d9      	ldr	r1, [r3, #12]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	460a      	mov	r2, r1
 8007348:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	791b      	ldrb	r3, [r3, #4]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d128      	bne.n	80073a4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d110      	bne.n	8007384 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	0151      	lsls	r1, r2, #5
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	440a      	add	r2, r1
 8007378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800737c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e00f      	b.n	80073a4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	440a      	add	r2, r1
 800739a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800739e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80073c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	1ff80000 	.word	0x1ff80000

080073d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d14a      	bne.n	8007488 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007406:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800740a:	f040 8086 	bne.w	800751a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	0151      	lsls	r1, r2, #5
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	440a      	add	r2, r1
 8007428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800742c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007430:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	7812      	ldrb	r2, [r2, #0]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007450:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007454:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007462:	4293      	cmp	r3, r2
 8007464:	d902      	bls.n	800746c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	75fb      	strb	r3, [r7, #23]
          break;
 800746a:	e056      	b.n	800751a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007484:	d0e7      	beq.n	8007456 <USB_EPStopXfer+0x82>
 8007486:	e048      	b.n	800751a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800749c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074a0:	d13b      	bne.n	800751a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d902      	bls.n	8007500 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]
          break;
 80074fe:	e00c      	b.n	800751a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007518:	d0e7      	beq.n	80074ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007528:	b480      	push	{r7}
 800752a:	b089      	sub	sp, #36	@ 0x24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4611      	mov	r1, r2
 8007534:	461a      	mov	r2, r3
 8007536:	460b      	mov	r3, r1
 8007538:	71fb      	strb	r3, [r7, #7]
 800753a:	4613      	mov	r3, r2
 800753c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007546:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800754a:	2b00      	cmp	r3, #0
 800754c:	d123      	bne.n	8007596 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800754e:	88bb      	ldrh	r3, [r7, #4]
 8007550:	3303      	adds	r3, #3
 8007552:	089b      	lsrs	r3, r3, #2
 8007554:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	e018      	b.n	800758e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	031a      	lsls	r2, r3, #12
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007568:	461a      	mov	r2, r3
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	3301      	adds	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3301      	adds	r3, #1
 800757a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	3301      	adds	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	3301      	adds	r3, #1
 8007586:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	3301      	adds	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	429a      	cmp	r2, r3
 8007594:	d3e2      	bcc.n	800755c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3724      	adds	r7, #36	@ 0x24
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b08b      	sub	sp, #44	@ 0x2c
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	089b      	lsrs	r3, r3, #2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075ca:	2300      	movs	r3, #0
 80075cc:	623b      	str	r3, [r7, #32]
 80075ce:	e014      	b.n	80075fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	601a      	str	r2, [r3, #0]
    pDest++;
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	3301      	adds	r3, #1
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	3301      	adds	r3, #1
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	3301      	adds	r3, #1
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	3301      	adds	r3, #1
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	3301      	adds	r3, #1
 80075f8:	623b      	str	r3, [r7, #32]
 80075fa:	6a3a      	ldr	r2, [r7, #32]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d3e6      	bcc.n	80075d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007602:	8bfb      	ldrh	r3, [r7, #30]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01e      	beq.n	8007646 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007612:	461a      	mov	r2, r3
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
 8007628:	b2da      	uxtb	r2, r3
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	701a      	strb	r2, [r3, #0]
      i++;
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	3301      	adds	r3, #1
 8007632:	623b      	str	r3, [r7, #32]
      pDest++;
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	3301      	adds	r3, #1
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800763a:	8bfb      	ldrh	r3, [r7, #30]
 800763c:	3b01      	subs	r3, #1
 800763e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007640:	8bfb      	ldrh	r3, [r7, #30]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1ea      	bne.n	800761c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007648:	4618      	mov	r0, r3
 800764a:	372c      	adds	r7, #44	@ 0x2c
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d12c      	bne.n	80076ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	db12      	blt.n	80076a8 <USB_EPSetStall+0x54>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00f      	beq.n	80076a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80076a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	e02b      	b.n	8007722 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	db12      	blt.n	8007702 <USB_EPSetStall+0xae>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00f      	beq.n	8007702 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007700:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800771c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007720:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d128      	bne.n	800779e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007766:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800776a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d003      	beq.n	800777c <USB_EPClearStall+0x4c>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	791b      	ldrb	r3, [r3, #4]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d138      	bne.n	80077ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e027      	b.n	80077ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d003      	beq.n	80077ce <USB_EPClearStall+0x9e>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	791b      	ldrb	r3, [r3, #4]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d10f      	bne.n	80077ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800781a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800781e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007830:	68f9      	ldr	r1, [r7, #12]
 8007832:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007836:	4313      	orrs	r3, r2
 8007838:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007876:	f023 0302 	bic.w	r3, r3, #2
 800787a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078a4:	f023 0303 	bic.w	r3, r3, #3
 80078a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078b8:	f043 0302 	orr.w	r3, r3, #2
 80078bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4013      	ands	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	4013      	ands	r3, r2
 8007914:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	0c1b      	lsrs	r3, r3, #16
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	4013      	ands	r3, r2
 8007948:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	b29b      	uxth	r3, r3
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4013      	ands	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007988:	68bb      	ldr	r3, [r7, #8]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007996:	b480      	push	{r7}
 8007998:	b087      	sub	sp, #28
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	f003 030f 	and.w	r3, r3, #15
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	fa22 f303 	lsr.w	r3, r2, r3
 80079c6:	01db      	lsls	r3, r3, #7
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4013      	ands	r3, r2
 80079e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079e4:	68bb      	ldr	r3, [r7, #8]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f003 0301 	and.w	r3, r3, #1
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a28:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	333c      	adds	r3, #60	@ 0x3c
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4a26      	ldr	r2, [pc, #152]	@ (8007b0c <USB_EP0_OutStart+0xb8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d90a      	bls.n	8007a8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a88:	d101      	bne.n	8007a8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e037      	b.n	8007afe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a94:	461a      	mov	r2, r3
 8007a96:	2300      	movs	r3, #0
 8007a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007abc:	f043 0318 	orr.w	r3, r3, #24
 8007ac0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007ad4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ad6:	7afb      	ldrb	r3, [r7, #11]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d10f      	bne.n	8007afc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	4f54300a 	.word	0x4f54300a

08007b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b28:	d901      	bls.n	8007b2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e01b      	b.n	8007b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	daf2      	bge.n	8007b1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f043 0201 	orr.w	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b52:	d901      	bls.n	8007b58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e006      	b.n	8007b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d0f0      	beq.n	8007b46 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b80:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b84:	f002 fc9e 	bl	800a4c4 <USBD_static_malloc>
 8007b88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32b0      	adds	r2, #176	@ 0xb0
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	e0d4      	b.n	8007d4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ba4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f002 fcce 	bl	800a54c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	32b0      	adds	r2, #176	@ 0xb0
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32b0      	adds	r2, #176	@ 0xb0
 8007bca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7c1b      	ldrb	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d138      	bne.n	8007c4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bdc:	4b5e      	ldr	r3, [pc, #376]	@ (8007d58 <USBD_CDC_Init+0x1e4>)
 8007bde:	7819      	ldrb	r1, [r3, #0]
 8007be0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007be4:	2202      	movs	r2, #2
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f002 fb49 	bl	800a27e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bec:	4b5a      	ldr	r3, [pc, #360]	@ (8007d58 <USBD_CDC_Init+0x1e4>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f003 020f 	and.w	r2, r3, #15
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3324      	adds	r3, #36	@ 0x24
 8007c02:	2201      	movs	r2, #1
 8007c04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c06:	4b55      	ldr	r3, [pc, #340]	@ (8007d5c <USBD_CDC_Init+0x1e8>)
 8007c08:	7819      	ldrb	r1, [r3, #0]
 8007c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c0e:	2202      	movs	r2, #2
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f002 fb34 	bl	800a27e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c16:	4b51      	ldr	r3, [pc, #324]	@ (8007d5c <USBD_CDC_Init+0x1e8>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c2e:	2201      	movs	r2, #1
 8007c30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c32:	4b4b      	ldr	r3, [pc, #300]	@ (8007d60 <USBD_CDC_Init+0x1ec>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f003 020f 	and.w	r2, r3, #15
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	3326      	adds	r3, #38	@ 0x26
 8007c48:	2210      	movs	r2, #16
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e035      	b.n	8007cba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c4e:	4b42      	ldr	r3, [pc, #264]	@ (8007d58 <USBD_CDC_Init+0x1e4>)
 8007c50:	7819      	ldrb	r1, [r3, #0]
 8007c52:	2340      	movs	r3, #64	@ 0x40
 8007c54:	2202      	movs	r2, #2
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f002 fb11 	bl	800a27e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d58 <USBD_CDC_Init+0x1e4>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 020f 	and.w	r2, r3, #15
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	3324      	adds	r3, #36	@ 0x24
 8007c72:	2201      	movs	r2, #1
 8007c74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c76:	4b39      	ldr	r3, [pc, #228]	@ (8007d5c <USBD_CDC_Init+0x1e8>)
 8007c78:	7819      	ldrb	r1, [r3, #0]
 8007c7a:	2340      	movs	r3, #64	@ 0x40
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f002 fafd 	bl	800a27e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c84:	4b35      	ldr	r3, [pc, #212]	@ (8007d5c <USBD_CDC_Init+0x1e8>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 020f 	and.w	r2, r3, #15
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	440b      	add	r3, r1
 8007c98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8007d60 <USBD_CDC_Init+0x1ec>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3326      	adds	r3, #38	@ 0x26
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cba:	4b29      	ldr	r3, [pc, #164]	@ (8007d60 <USBD_CDC_Init+0x1ec>)
 8007cbc:	7819      	ldrb	r1, [r3, #0]
 8007cbe:	2308      	movs	r3, #8
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f002 fadb 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cc8:	4b25      	ldr	r3, [pc, #148]	@ (8007d60 <USBD_CDC_Init+0x1ec>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3324      	adds	r3, #36	@ 0x24
 8007cde:	2201      	movs	r2, #1
 8007ce0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	33b0      	adds	r3, #176	@ 0xb0
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e018      	b.n	8007d4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	7c1b      	ldrb	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d24:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <USBD_CDC_Init+0x1e8>)
 8007d26:	7819      	ldrb	r1, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f002 fb92 	bl	800a45c <USBD_LL_PrepareReceive>
 8007d38:	e008      	b.n	8007d4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d3a:	4b08      	ldr	r3, [pc, #32]	@ (8007d5c <USBD_CDC_Init+0x1e8>)
 8007d3c:	7819      	ldrb	r1, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d44:	2340      	movs	r3, #64	@ 0x40
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f002 fb88 	bl	800a45c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000097 	.word	0x20000097
 8007d5c:	20000098 	.word	0x20000098
 8007d60:	20000099 	.word	0x20000099

08007d64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d70:	4b3a      	ldr	r3, [pc, #232]	@ (8007e5c <USBD_CDC_DeInit+0xf8>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f002 faa7 	bl	800a2ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d7c:	4b37      	ldr	r3, [pc, #220]	@ (8007e5c <USBD_CDC_DeInit+0xf8>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 020f 	and.w	r2, r3, #15
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	3324      	adds	r3, #36	@ 0x24
 8007d92:	2200      	movs	r2, #0
 8007d94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d96:	4b32      	ldr	r3, [pc, #200]	@ (8007e60 <USBD_CDC_DeInit+0xfc>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f002 fa94 	bl	800a2ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007da2:	4b2f      	ldr	r3, [pc, #188]	@ (8007e60 <USBD_CDC_DeInit+0xfc>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 020f 	and.w	r2, r3, #15
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007dba:	2200      	movs	r2, #0
 8007dbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007dbe:	4b29      	ldr	r3, [pc, #164]	@ (8007e64 <USBD_CDC_DeInit+0x100>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f002 fa80 	bl	800a2ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007dca:	4b26      	ldr	r3, [pc, #152]	@ (8007e64 <USBD_CDC_DeInit+0x100>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3324      	adds	r3, #36	@ 0x24
 8007de0:	2200      	movs	r2, #0
 8007de2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007de4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e64 <USBD_CDC_DeInit+0x100>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 020f 	and.w	r2, r3, #15
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	3326      	adds	r3, #38	@ 0x26
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	32b0      	adds	r2, #176	@ 0xb0
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01f      	beq.n	8007e50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	33b0      	adds	r3, #176	@ 0xb0
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32b0      	adds	r2, #176	@ 0xb0
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f002 fb54 	bl	800a4e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32b0      	adds	r2, #176	@ 0xb0
 8007e42:	2100      	movs	r1, #0
 8007e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000097 	.word	0x20000097
 8007e60:	20000098 	.word	0x20000098
 8007e64:	20000099 	.word	0x20000099

08007e68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32b0      	adds	r2, #176	@ 0xb0
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e0bf      	b.n	8008018 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d050      	beq.n	8007f46 <USBD_CDC_Setup+0xde>
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	f040 80af 	bne.w	8008008 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03a      	beq.n	8007f28 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	b25b      	sxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da1b      	bge.n	8007ef4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	33b0      	adds	r3, #176	@ 0xb0
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ed2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	88d2      	ldrh	r2, [r2, #6]
 8007ed8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b07      	cmp	r3, #7
 8007ee0:	bf28      	it	cs
 8007ee2:	2307      	movcs	r3, #7
 8007ee4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	89fa      	ldrh	r2, [r7, #14]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f001 fd93 	bl	8009a18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ef2:	e090      	b.n	8008016 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	785a      	ldrb	r2, [r3, #1]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f04:	d803      	bhi.n	8007f0e <USBD_CDC_Setup+0xa6>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	88db      	ldrh	r3, [r3, #6]
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	e000      	b.n	8007f10 <USBD_CDC_Setup+0xa8>
 8007f0e:	2240      	movs	r2, #64	@ 0x40
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f16:	6939      	ldr	r1, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fda5 	bl	8009a70 <USBD_CtlPrepareRx>
      break;
 8007f26:	e076      	b.n	8008016 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	33b0      	adds	r3, #176	@ 0xb0
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	7850      	ldrb	r0, [r2, #1]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	4798      	blx	r3
      break;
 8007f44:	e067      	b.n	8008016 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	2b0b      	cmp	r3, #11
 8007f4c:	d851      	bhi.n	8007ff2 <USBD_CDC_Setup+0x18a>
 8007f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <USBD_CDC_Setup+0xec>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08008001 	.word	0x08008001
 8007f5c:	08007ff3 	.word	0x08007ff3
 8007f60:	08007ff3 	.word	0x08007ff3
 8007f64:	08007ff3 	.word	0x08007ff3
 8007f68:	08007ff3 	.word	0x08007ff3
 8007f6c:	08007ff3 	.word	0x08007ff3
 8007f70:	08007ff3 	.word	0x08007ff3
 8007f74:	08007ff3 	.word	0x08007ff3
 8007f78:	08007ff3 	.word	0x08007ff3
 8007f7c:	08007faf 	.word	0x08007faf
 8007f80:	08007fd9 	.word	0x08007fd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d107      	bne.n	8007fa0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f90:	f107 030a 	add.w	r3, r7, #10
 8007f94:	2202      	movs	r2, #2
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fd3d 	bl	8009a18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f9e:	e032      	b.n	8008006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fcbb 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	75fb      	strb	r3, [r7, #23]
          break;
 8007fac:	e02b      	b.n	8008006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d107      	bne.n	8007fca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fba:	f107 030d 	add.w	r3, r7, #13
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fd28 	bl	8009a18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fc8:	e01d      	b.n	8008006 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fca6 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fd6:	e016      	b.n	8008006 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d00f      	beq.n	8008004 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fc99 	bl	800991e <USBD_CtlError>
            ret = USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ff0:	e008      	b.n	8008004 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 fc92 	bl	800991e <USBD_CtlError>
          ret = USBD_FAIL;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ffe:	e002      	b.n	8008006 <USBD_CDC_Setup+0x19e>
          break;
 8008000:	bf00      	nop
 8008002:	e008      	b.n	8008016 <USBD_CDC_Setup+0x1ae>
          break;
 8008004:	bf00      	nop
      }
      break;
 8008006:	e006      	b.n	8008016 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fc87 	bl	800991e <USBD_CtlError>
      ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	75fb      	strb	r3, [r7, #23]
      break;
 8008014:	bf00      	nop
  }

  return (uint8_t)ret;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	32b0      	adds	r2, #176	@ 0xb0
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	e065      	b.n	8008116 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	32b0      	adds	r2, #176	@ 0xb0
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	3318      	adds	r3, #24
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d02f      	beq.n	80080d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	f003 020f 	and.w	r2, r3, #15
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	3318      	adds	r3, #24
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	f003 010f 	and.w	r1, r3, #15
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	460b      	mov	r3, r1
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	440b      	add	r3, r1
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4403      	add	r3, r0
 800809c:	331c      	adds	r3, #28
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d112      	bne.n	80080d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	f003 020f 	and.w	r2, r3, #15
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	3318      	adds	r3, #24
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080c6:	78f9      	ldrb	r1, [r7, #3]
 80080c8:	2300      	movs	r3, #0
 80080ca:	2200      	movs	r2, #0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f002 f9a4 	bl	800a41a <USBD_LL_Transmit>
 80080d2:	e01f      	b.n	8008114 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	33b0      	adds	r3, #176	@ 0xb0
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d010      	beq.n	8008114 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	33b0      	adds	r3, #176	@ 0xb0
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	32b0      	adds	r2, #176	@ 0xb0
 8008134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	32b0      	adds	r2, #176	@ 0xb0
 8008144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800814c:	2303      	movs	r3, #3
 800814e:	e01a      	b.n	8008186 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f002 f9a2 	bl	800a49e <USBD_LL_GetRxDataSize>
 800815a:	4602      	mov	r2, r0
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	33b0      	adds	r3, #176	@ 0xb0
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008180:	4611      	mov	r1, r2
 8008182:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	32b0      	adds	r2, #176	@ 0xb0
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e024      	b.n	80081fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	33b0      	adds	r3, #176	@ 0xb0
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d019      	beq.n	80081f8 <USBD_CDC_EP0_RxReady+0x6a>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80081ca:	2bff      	cmp	r3, #255	@ 0xff
 80081cc:	d014      	beq.n	80081f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	33b0      	adds	r3, #176	@ 0xb0
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80081e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	22ff      	movs	r2, #255	@ 0xff
 80081f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800820c:	2182      	movs	r1, #130	@ 0x82
 800820e:	4818      	ldr	r0, [pc, #96]	@ (8008270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008210:	f000 fd4f 	bl	8008cb2 <USBD_GetEpDesc>
 8008214:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008216:	2101      	movs	r1, #1
 8008218:	4815      	ldr	r0, [pc, #84]	@ (8008270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800821a:	f000 fd4a 	bl	8008cb2 <USBD_GetEpDesc>
 800821e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008220:	2181      	movs	r1, #129	@ 0x81
 8008222:	4813      	ldr	r0, [pc, #76]	@ (8008270 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008224:	f000 fd45 	bl	8008cb2 <USBD_GetEpDesc>
 8008228:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2210      	movs	r2, #16
 8008234:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2200      	movs	r2, #0
 8008240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008244:	711a      	strb	r2, [r3, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008258:	711a      	strb	r2, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2243      	movs	r2, #67	@ 0x43
 8008262:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008264:	4b02      	ldr	r3, [pc, #8]	@ (8008270 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000054 	.word	0x20000054

08008274 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800827c:	2182      	movs	r1, #130	@ 0x82
 800827e:	4818      	ldr	r0, [pc, #96]	@ (80082e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008280:	f000 fd17 	bl	8008cb2 <USBD_GetEpDesc>
 8008284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008286:	2101      	movs	r1, #1
 8008288:	4815      	ldr	r0, [pc, #84]	@ (80082e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800828a:	f000 fd12 	bl	8008cb2 <USBD_GetEpDesc>
 800828e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008290:	2181      	movs	r1, #129	@ 0x81
 8008292:	4813      	ldr	r0, [pc, #76]	@ (80082e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008294:	f000 fd0d 	bl	8008cb2 <USBD_GetEpDesc>
 8008298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2210      	movs	r2, #16
 80082a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d006      	beq.n	80082ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2200      	movs	r2, #0
 80082b0:	711a      	strb	r2, [r3, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f042 0202 	orr.w	r2, r2, #2
 80082b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d006      	beq.n	80082ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	711a      	strb	r2, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f042 0202 	orr.w	r2, r2, #2
 80082cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2243      	movs	r2, #67	@ 0x43
 80082d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d4:	4b02      	ldr	r3, [pc, #8]	@ (80082e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000054 	.word	0x20000054

080082e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082ec:	2182      	movs	r1, #130	@ 0x82
 80082ee:	4818      	ldr	r0, [pc, #96]	@ (8008350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082f0:	f000 fcdf 	bl	8008cb2 <USBD_GetEpDesc>
 80082f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082f6:	2101      	movs	r1, #1
 80082f8:	4815      	ldr	r0, [pc, #84]	@ (8008350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082fa:	f000 fcda 	bl	8008cb2 <USBD_GetEpDesc>
 80082fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008300:	2181      	movs	r1, #129	@ 0x81
 8008302:	4813      	ldr	r0, [pc, #76]	@ (8008350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008304:	f000 fcd5 	bl	8008cb2 <USBD_GetEpDesc>
 8008308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2210      	movs	r2, #16
 8008314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d006      	beq.n	800832a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2200      	movs	r2, #0
 8008320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008324:	711a      	strb	r2, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d006      	beq.n	800833e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008338:	711a      	strb	r2, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2243      	movs	r2, #67	@ 0x43
 8008342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008344:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008346:	4618      	mov	r0, r3
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000054 	.word	0x20000054

08008354 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	220a      	movs	r2, #10
 8008360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008362:	4b03      	ldr	r3, [pc, #12]	@ (8008370 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	20000010 	.word	0x20000010

08008374 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e009      	b.n	800839c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	33b0      	adds	r3, #176	@ 0xb0
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	32b0      	adds	r2, #176	@ 0xb0
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e008      	b.n	80083e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	32b0      	adds	r2, #176	@ 0xb0
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	e004      	b.n	800841a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	32b0      	adds	r2, #176	@ 0xb0
 800843a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008440:	2301      	movs	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	e025      	b.n	800849a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008454:	2b00      	cmp	r3, #0
 8008456:	d11f      	bne.n	8008498 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2201      	movs	r2, #1
 800845c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008460:	4b10      	ldr	r3, [pc, #64]	@ (80084a4 <USBD_CDC_TransmitPacket+0x7c>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 020f 	and.w	r2, r3, #15
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4403      	add	r3, r0
 800847a:	3318      	adds	r3, #24
 800847c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800847e:	4b09      	ldr	r3, [pc, #36]	@ (80084a4 <USBD_CDC_TransmitPacket+0x7c>)
 8008480:	7819      	ldrb	r1, [r3, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 ffc3 	bl	800a41a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000097 	.word	0x20000097

080084a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32b0      	adds	r2, #176	@ 0xb0
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	32b0      	adds	r2, #176	@ 0xb0
 80084ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e018      	b.n	8008508 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	7c1b      	ldrb	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084de:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <USBD_CDC_ReceivePacket+0x68>)
 80084e0:	7819      	ldrb	r1, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 ffb5 	bl	800a45c <USBD_LL_PrepareReceive>
 80084f2:	e008      	b.n	8008506 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80084f4:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <USBD_CDC_ReceivePacket+0x68>)
 80084f6:	7819      	ldrb	r1, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084fe:	2340      	movs	r3, #64	@ 0x40
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 ffab 	bl	800a45c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000098 	.word	0x20000098

08008514 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	e01f      	b.n	800856c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	79fa      	ldrb	r2, [r7, #7]
 800855e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f001 fe25 	bl	800a1b0 <USBD_LL_Init>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]

  return ret;
 800856a:	7dfb      	ldrb	r3, [r7, #23]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	e025      	b.n	80085d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32ae      	adds	r2, #174	@ 0xae
 800859e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00f      	beq.n	80085c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32ae      	adds	r2, #174	@ 0xae
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	f107 020e 	add.w	r2, r7, #14
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
 80085c0:	4602      	mov	r2, r0
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 fe2d 	bl	800a248 <USBD_LL_Start>
 80085ee:	4603      	mov	r3, r0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008600:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008602:	4618      	mov	r0, r3
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4611      	mov	r1, r2
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	4611      	mov	r1, r2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f90c 	bl	80098aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80086a0:	461a      	mov	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086ae:	f003 031f 	and.w	r3, r3, #31
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d01a      	beq.n	80086ec <USBD_LL_SetupStage+0x72>
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d822      	bhi.n	8008700 <USBD_LL_SetupStage+0x86>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <USBD_LL_SetupStage+0x4a>
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d00a      	beq.n	80086d8 <USBD_LL_SetupStage+0x5e>
 80086c2:	e01d      	b.n	8008700 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fb63 	bl	8008d98 <USBD_StdDevReq>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]
      break;
 80086d6:	e020      	b.n	800871a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fbcb 	bl	8008e7c <USBD_StdItfReq>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ea:	e016      	b.n	800871a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc2d 	bl	8008f54 <USBD_StdEPReq>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
      break;
 80086fe:	e00c      	b.n	800871a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008706:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800870a:	b2db      	uxtb	r3, r3
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fdfa 	bl	800a308 <USBD_LL_StallEP>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
      break;
 8008718:	bf00      	nop
  }

  return ret;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	460b      	mov	r3, r1
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d16e      	bne.n	800881a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008742:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800874a:	2b03      	cmp	r3, #3
 800874c:	f040 8098 	bne.w	8008880 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	429a      	cmp	r2, r3
 800875a:	d913      	bls.n	8008784 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	1ad2      	subs	r2, r2, r3
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	4293      	cmp	r3, r2
 8008774:	bf28      	it	cs
 8008776:	4613      	movcs	r3, r2
 8008778:	461a      	mov	r2, r3
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f001 f994 	bl	8009aaa <USBD_CtlContinueRx>
 8008782:	e07d      	b.n	8008880 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800878a:	f003 031f 	and.w	r3, r3, #31
 800878e:	2b02      	cmp	r3, #2
 8008790:	d014      	beq.n	80087bc <USBD_LL_DataOutStage+0x98>
 8008792:	2b02      	cmp	r3, #2
 8008794:	d81d      	bhi.n	80087d2 <USBD_LL_DataOutStage+0xae>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <USBD_LL_DataOutStage+0x7c>
 800879a:	2b01      	cmp	r3, #1
 800879c:	d003      	beq.n	80087a6 <USBD_LL_DataOutStage+0x82>
 800879e:	e018      	b.n	80087d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	75bb      	strb	r3, [r7, #22]
            break;
 80087a4:	e018      	b.n	80087d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	4619      	mov	r1, r3
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fa64 	bl	8008c7e <USBD_CoreFindIF>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75bb      	strb	r3, [r7, #22]
            break;
 80087ba:	e00d      	b.n	80087d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	4619      	mov	r1, r3
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 fa66 	bl	8008c98 <USBD_CoreFindEP>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75bb      	strb	r3, [r7, #22]
            break;
 80087d0:	e002      	b.n	80087d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75bb      	strb	r3, [r7, #22]
            break;
 80087d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80087d8:	7dbb      	ldrb	r3, [r7, #22]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d119      	bne.n	8008812 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d113      	bne.n	8008812 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80087ea:	7dba      	ldrb	r2, [r7, #22]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	32ae      	adds	r2, #174	@ 0xae
 80087f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80087fa:	7dba      	ldrb	r2, [r7, #22]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008802:	7dba      	ldrb	r2, [r7, #22]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	32ae      	adds	r2, #174	@ 0xae
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 f95a 	bl	8009acc <USBD_CtlSendStatus>
 8008818:	e032      	b.n	8008880 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008820:	b2db      	uxtb	r3, r3
 8008822:	4619      	mov	r1, r3
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fa37 	bl	8008c98 <USBD_CoreFindEP>
 800882a:	4603      	mov	r3, r0
 800882c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800882e:	7dbb      	ldrb	r3, [r7, #22]
 8008830:	2bff      	cmp	r3, #255	@ 0xff
 8008832:	d025      	beq.n	8008880 <USBD_LL_DataOutStage+0x15c>
 8008834:	7dbb      	ldrb	r3, [r7, #22]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d122      	bne.n	8008880 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b03      	cmp	r3, #3
 8008844:	d117      	bne.n	8008876 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008846:	7dba      	ldrb	r2, [r7, #22]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	32ae      	adds	r2, #174	@ 0xae
 800884c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00f      	beq.n	8008876 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008856:	7dba      	ldrb	r2, [r7, #22]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800885e:	7dba      	ldrb	r2, [r7, #22]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	32ae      	adds	r2, #174	@ 0xae
 8008864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	7afa      	ldrb	r2, [r7, #11]
 800886c:	4611      	mov	r1, r2
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3
 8008872:	4603      	mov	r3, r0
 8008874:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	e000      	b.n	8008882 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	460b      	mov	r3, r1
 8008894:	607a      	str	r2, [r7, #4]
 8008896:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008898:	7afb      	ldrb	r3, [r7, #11]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d16f      	bne.n	800897e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3314      	adds	r3, #20
 80088a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d15a      	bne.n	8008964 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d914      	bls.n	80088e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	1ad2      	subs	r2, r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 f8bc 	bl	8009a4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d6:	2300      	movs	r3, #0
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f001 fdbd 	bl	800a45c <USBD_LL_PrepareReceive>
 80088e2:	e03f      	b.n	8008964 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d11c      	bne.n	800892a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d316      	bcc.n	800892a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008906:	429a      	cmp	r2, r3
 8008908:	d20f      	bcs.n	800892a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f001 f89d 	bl	8009a4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800891c:	2300      	movs	r3, #0
 800891e:	2200      	movs	r2, #0
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f001 fd9a 	bl	800a45c <USBD_LL_PrepareReceive>
 8008928:	e01c      	b.n	8008964 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d10f      	bne.n	8008956 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f001 fcd5 	bl	800a308 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f001 f8c7 	bl	8009af2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d03a      	beq.n	80089e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff fe42 	bl	80085f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800897c:	e032      	b.n	80089e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800897e:	7afb      	ldrb	r3, [r7, #11]
 8008980:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f985 	bl	8008c98 <USBD_CoreFindEP>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	2bff      	cmp	r3, #255	@ 0xff
 8008996:	d025      	beq.n	80089e4 <USBD_LL_DataInStage+0x15a>
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d122      	bne.n	80089e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d11c      	bne.n	80089e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089aa:	7dfa      	ldrb	r2, [r7, #23]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	32ae      	adds	r2, #174	@ 0xae
 80089b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d014      	beq.n	80089e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089ba:	7dfa      	ldrb	r2, [r7, #23]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80089c2:	7dfa      	ldrb	r2, [r7, #23]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	32ae      	adds	r2, #174	@ 0xae
 80089c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	7afa      	ldrb	r2, [r7, #11]
 80089d0:	4611      	mov	r1, r2
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	4798      	blx	r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80089da:	7dbb      	ldrb	r3, [r7, #22]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80089e0:	7dbb      	ldrb	r3, [r7, #22]
 80089e2:	e000      	b.n	80089e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d014      	beq.n	8008a54 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00e      	beq.n	8008a54 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6852      	ldr	r2, [r2, #4]
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	4611      	mov	r1, r2
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a50:	2303      	movs	r3, #3
 8008a52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a54:	2340      	movs	r3, #64	@ 0x40
 8008a56:	2200      	movs	r2, #0
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 fc0f 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2240      	movs	r2, #64	@ 0x40
 8008a6c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	2200      	movs	r2, #0
 8008a74:	2180      	movs	r1, #128	@ 0x80
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fc01 	bl	800a27e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2240      	movs	r2, #64	@ 0x40
 8008a86:	621a      	str	r2, [r3, #32]

  return ret;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b083      	sub	sp, #12
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d006      	beq.n	8008ad4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	d106      	bne.n	8008b0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d110      	bne.n	8008b50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	460b      	mov	r3, r1
 8008b64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32ae      	adds	r2, #174	@ 0xae
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e01c      	b.n	8008bb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d115      	bne.n	8008bb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	32ae      	adds	r2, #174	@ 0xae
 8008b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	32ae      	adds	r2, #174	@ 0xae
 8008ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	32ae      	adds	r2, #174	@ 0xae
 8008bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e01c      	b.n	8008c1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d115      	bne.n	8008c18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	32ae      	adds	r2, #174	@ 0xae
 8008bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	32ae      	adds	r2, #174	@ 0xae
 8008c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	4611      	mov	r1, r2
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00e      	beq.n	8008c74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6852      	ldr	r2, [r2, #4]
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	4611      	mov	r1, r2
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ca4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	885b      	ldrh	r3, [r3, #2]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d91f      	bls.n	8008d18 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008cde:	e013      	b.n	8008d08 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ce0:	f107 030a 	add.w	r3, r7, #10
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f000 f81b 	bl	8008d22 <USBD_GetNextDesc>
 8008cec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d108      	bne.n	8008d08 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	789b      	ldrb	r3, [r3, #2]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d008      	beq.n	8008d16 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	885b      	ldrh	r3, [r3, #2]
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	897b      	ldrh	r3, [r7, #10]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d8e5      	bhi.n	8008ce0 <USBD_GetEpDesc+0x2e>
 8008d14:	e000      	b.n	8008d18 <USBD_GetEpDesc+0x66>
          break;
 8008d16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d18:	693b      	ldr	r3, [r7, #16]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	4413      	add	r3, r2
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008d78:	8a3b      	ldrh	r3, [r7, #16]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	b21a      	sxth	r2, r3
 8008d7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	b21b      	sxth	r3, r3
 8008d86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d88:	89fb      	ldrh	r3, [r7, #14]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
	...

08008d98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d005      	beq.n	8008dbe <USBD_StdDevReq+0x26>
 8008db2:	2b40      	cmp	r3, #64	@ 0x40
 8008db4:	d857      	bhi.n	8008e66 <USBD_StdDevReq+0xce>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00f      	beq.n	8008dda <USBD_StdDevReq+0x42>
 8008dba:	2b20      	cmp	r3, #32
 8008dbc:	d153      	bne.n	8008e66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	32ae      	adds	r2, #174	@ 0xae
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd8:	e04a      	b.n	8008e70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b09      	cmp	r3, #9
 8008de0:	d83b      	bhi.n	8008e5a <USBD_StdDevReq+0xc2>
 8008de2:	a201      	add	r2, pc, #4	@ (adr r2, 8008de8 <USBD_StdDevReq+0x50>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008e51 	.word	0x08008e51
 8008df0:	08008e5b 	.word	0x08008e5b
 8008df4:	08008e47 	.word	0x08008e47
 8008df8:	08008e5b 	.word	0x08008e5b
 8008dfc:	08008e1b 	.word	0x08008e1b
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e5b 	.word	0x08008e5b
 8008e08:	08008e33 	.word	0x08008e33
 8008e0c:	08008e25 	.word	0x08008e25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa3c 	bl	8009290 <USBD_GetDescriptor>
          break;
 8008e18:	e024      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fba1 	bl	8009564 <USBD_SetAddress>
          break;
 8008e22:	e01f      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fbe0 	bl	80095ec <USBD_SetConfig>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e30:	e018      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc83 	bl	8009740 <USBD_GetConfig>
          break;
 8008e3a:	e013      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fcb4 	bl	80097ac <USBD_GetStatus>
          break;
 8008e44:	e00e      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fce3 	bl	8009814 <USBD_SetFeature>
          break;
 8008e4e:	e009      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fd07 	bl	8009866 <USBD_ClrFeature>
          break;
 8008e58:	e004      	b.n	8008e64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fd5e 	bl	800991e <USBD_CtlError>
          break;
 8008e62:	bf00      	nop
      }
      break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fd58 	bl	800991e <USBD_CtlError>
      break;
 8008e6e:	bf00      	nop
  }

  return ret;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop

08008e7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d005      	beq.n	8008ea2 <USBD_StdItfReq+0x26>
 8008e96:	2b40      	cmp	r3, #64	@ 0x40
 8008e98:	d852      	bhi.n	8008f40 <USBD_StdItfReq+0xc4>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <USBD_StdItfReq+0x26>
 8008e9e:	2b20      	cmp	r3, #32
 8008ea0:	d14e      	bne.n	8008f40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d840      	bhi.n	8008f32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	889b      	ldrh	r3, [r3, #4]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d836      	bhi.n	8008f28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	889b      	ldrh	r3, [r3, #4]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fedb 	bl	8008c7e <USBD_CoreFindIF>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2bff      	cmp	r3, #255	@ 0xff
 8008ed0:	d01d      	beq.n	8008f0e <USBD_StdItfReq+0x92>
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11a      	bne.n	8008f0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ed8:	7bba      	ldrb	r2, [r7, #14]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	32ae      	adds	r2, #174	@ 0xae
 8008ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00f      	beq.n	8008f08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ee8:	7bba      	ldrb	r2, [r7, #14]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ef0:	7bba      	ldrb	r2, [r7, #14]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32ae      	adds	r2, #174	@ 0xae
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f06:	e004      	b.n	8008f12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f0c:	e001      	b.n	8008f12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	88db      	ldrh	r3, [r3, #6]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d110      	bne.n	8008f3c <USBD_StdItfReq+0xc0>
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10d      	bne.n	8008f3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fdd3 	bl	8009acc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f26:	e009      	b.n	8008f3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fcf7 	bl	800991e <USBD_CtlError>
          break;
 8008f30:	e004      	b.n	8008f3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fcf2 	bl	800991e <USBD_CtlError>
          break;
 8008f3a:	e000      	b.n	8008f3e <USBD_StdItfReq+0xc2>
          break;
 8008f3c:	bf00      	nop
      }
      break;
 8008f3e:	e004      	b.n	8008f4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fceb 	bl	800991e <USBD_CtlError>
      break;
 8008f48:	bf00      	nop
  }

  return ret;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	889b      	ldrh	r3, [r3, #4]
 8008f66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f70:	2b40      	cmp	r3, #64	@ 0x40
 8008f72:	d007      	beq.n	8008f84 <USBD_StdEPReq+0x30>
 8008f74:	2b40      	cmp	r3, #64	@ 0x40
 8008f76:	f200 817f 	bhi.w	8009278 <USBD_StdEPReq+0x324>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d02a      	beq.n	8008fd4 <USBD_StdEPReq+0x80>
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	f040 817a 	bne.w	8009278 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff fe85 	bl	8008c98 <USBD_CoreFindEP>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f92:	7b7b      	ldrb	r3, [r7, #13]
 8008f94:	2bff      	cmp	r3, #255	@ 0xff
 8008f96:	f000 8174 	beq.w	8009282 <USBD_StdEPReq+0x32e>
 8008f9a:	7b7b      	ldrb	r3, [r7, #13]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 8170 	bne.w	8009282 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008fa2:	7b7a      	ldrb	r2, [r7, #13]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008faa:	7b7a      	ldrb	r2, [r7, #13]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	32ae      	adds	r2, #174	@ 0xae
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 8163 	beq.w	8009282 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008fbc:	7b7a      	ldrb	r2, [r7, #13]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	32ae      	adds	r2, #174	@ 0xae
 8008fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fd2:	e156      	b.n	8009282 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d008      	beq.n	8008fee <USBD_StdEPReq+0x9a>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	f300 8145 	bgt.w	800926c <USBD_StdEPReq+0x318>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 809b 	beq.w	800911e <USBD_StdEPReq+0x1ca>
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d03c      	beq.n	8009066 <USBD_StdEPReq+0x112>
 8008fec:	e13e      	b.n	800926c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d002      	beq.n	8009000 <USBD_StdEPReq+0xac>
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d016      	beq.n	800902c <USBD_StdEPReq+0xd8>
 8008ffe:	e02c      	b.n	800905a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00d      	beq.n	8009022 <USBD_StdEPReq+0xce>
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	2b80      	cmp	r3, #128	@ 0x80
 800900a:	d00a      	beq.n	8009022 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 f979 	bl	800a308 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009016:	2180      	movs	r1, #128	@ 0x80
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f975 	bl	800a308 <USBD_LL_StallEP>
 800901e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009020:	e020      	b.n	8009064 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc7a 	bl	800991e <USBD_CtlError>
              break;
 800902a:	e01b      	b.n	8009064 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	885b      	ldrh	r3, [r3, #2]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10e      	bne.n	8009052 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00b      	beq.n	8009052 <USBD_StdEPReq+0xfe>
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b80      	cmp	r3, #128	@ 0x80
 800903e:	d008      	beq.n	8009052 <USBD_StdEPReq+0xfe>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f95b 	bl	800a308 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fd3a 	bl	8009acc <USBD_CtlSendStatus>

              break;
 8009058:	e004      	b.n	8009064 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc5e 	bl	800991e <USBD_CtlError>
              break;
 8009062:	bf00      	nop
          }
          break;
 8009064:	e107      	b.n	8009276 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b02      	cmp	r3, #2
 8009070:	d002      	beq.n	8009078 <USBD_StdEPReq+0x124>
 8009072:	2b03      	cmp	r3, #3
 8009074:	d016      	beq.n	80090a4 <USBD_StdEPReq+0x150>
 8009076:	e04b      	b.n	8009110 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <USBD_StdEPReq+0x146>
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b80      	cmp	r3, #128	@ 0x80
 8009082:	d00a      	beq.n	800909a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f93d 	bl	800a308 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800908e:	2180      	movs	r1, #128	@ 0x80
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f939 	bl	800a308 <USBD_LL_StallEP>
 8009096:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009098:	e040      	b.n	800911c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fc3e 	bl	800991e <USBD_CtlError>
              break;
 80090a2:	e03b      	b.n	800911c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	885b      	ldrh	r3, [r3, #2]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d136      	bne.n	800911a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 f943 	bl	800a346 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fd03 	bl	8009acc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7ff fde4 	bl	8008c98 <USBD_CoreFindEP>
 80090d0:	4603      	mov	r3, r0
 80090d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090d4:	7b7b      	ldrb	r3, [r7, #13]
 80090d6:	2bff      	cmp	r3, #255	@ 0xff
 80090d8:	d01f      	beq.n	800911a <USBD_StdEPReq+0x1c6>
 80090da:	7b7b      	ldrb	r3, [r7, #13]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d11c      	bne.n	800911a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80090e0:	7b7a      	ldrb	r2, [r7, #13]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80090e8:	7b7a      	ldrb	r2, [r7, #13]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	32ae      	adds	r2, #174	@ 0xae
 80090ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090f8:	7b7a      	ldrb	r2, [r7, #13]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	32ae      	adds	r2, #174	@ 0xae
 80090fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800910e:	e004      	b.n	800911a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fc03 	bl	800991e <USBD_CtlError>
              break;
 8009118:	e000      	b.n	800911c <USBD_StdEPReq+0x1c8>
              break;
 800911a:	bf00      	nop
          }
          break;
 800911c:	e0ab      	b.n	8009276 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d002      	beq.n	8009130 <USBD_StdEPReq+0x1dc>
 800912a:	2b03      	cmp	r3, #3
 800912c:	d032      	beq.n	8009194 <USBD_StdEPReq+0x240>
 800912e:	e097      	b.n	8009260 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <USBD_StdEPReq+0x1f2>
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	2b80      	cmp	r3, #128	@ 0x80
 800913a:	d004      	beq.n	8009146 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fbed 	bl	800991e <USBD_CtlError>
                break;
 8009144:	e091      	b.n	800926a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da0b      	bge.n	8009166 <USBD_StdEPReq+0x212>
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	3310      	adds	r3, #16
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4413      	add	r3, r2
 8009162:	3304      	adds	r3, #4
 8009164:	e00b      	b.n	800917e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2202      	movs	r2, #2
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fc43 	bl	8009a18 <USBD_CtlSendData>
              break;
 8009192:	e06a      	b.n	800926a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009198:	2b00      	cmp	r3, #0
 800919a:	da11      	bge.n	80091c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	f003 020f 	and.w	r2, r3, #15
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	3324      	adds	r3, #36	@ 0x24
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d117      	bne.n	80091e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbb0 	bl	800991e <USBD_CtlError>
                  break;
 80091be:	e054      	b.n	800926a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	f003 020f 	and.w	r2, r3, #15
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fb9d 	bl	800991e <USBD_CtlError>
                  break;
 80091e4:	e041      	b.n	800926a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da0b      	bge.n	8009206 <USBD_StdEPReq+0x2b2>
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	3310      	adds	r3, #16
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	3304      	adds	r3, #4
 8009204:	e00b      	b.n	800921e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	3304      	adds	r3, #4
 800921e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <USBD_StdEPReq+0x2d8>
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b80      	cmp	r3, #128	@ 0x80
 800922a:	d103      	bne.n	8009234 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e00e      	b.n	8009252 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 f8a3 	bl	800a384 <USBD_LL_IsStallEP>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e002      	b.n	8009252 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2202      	movs	r2, #2
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fbdd 	bl	8009a18 <USBD_CtlSendData>
              break;
 800925e:	e004      	b.n	800926a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb5b 	bl	800991e <USBD_CtlError>
              break;
 8009268:	bf00      	nop
          }
          break;
 800926a:	e004      	b.n	8009276 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fb55 	bl	800991e <USBD_CtlError>
          break;
 8009274:	bf00      	nop
      }
      break;
 8009276:	e005      	b.n	8009284 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fb4f 	bl	800991e <USBD_CtlError>
      break;
 8009280:	e000      	b.n	8009284 <USBD_StdEPReq+0x330>
      break;
 8009282:	bf00      	nop
  }

  return ret;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	885b      	ldrh	r3, [r3, #2]
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3b01      	subs	r3, #1
 80092b0:	2b06      	cmp	r3, #6
 80092b2:	f200 8128 	bhi.w	8009506 <USBD_GetDescriptor+0x276>
 80092b6:	a201      	add	r2, pc, #4	@ (adr r2, 80092bc <USBD_GetDescriptor+0x2c>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092d9 	.word	0x080092d9
 80092c0:	080092f1 	.word	0x080092f1
 80092c4:	08009331 	.word	0x08009331
 80092c8:	08009507 	.word	0x08009507
 80092cc:	08009507 	.word	0x08009507
 80092d0:	080094a7 	.word	0x080094a7
 80092d4:	080094d3 	.word	0x080094d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7c12      	ldrb	r2, [r2, #16]
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
      break;
 80092ee:	e112      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7c1b      	ldrb	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10d      	bne.n	8009314 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009300:	f107 0208 	add.w	r2, r7, #8
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	2202      	movs	r2, #2
 8009310:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009312:	e100      	b.n	8009516 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800931a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931c:	f107 0208 	add.w	r2, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3301      	adds	r3, #1
 800932a:	2202      	movs	r2, #2
 800932c:	701a      	strb	r2, [r3, #0]
      break;
 800932e:	e0f2      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b05      	cmp	r3, #5
 8009338:	f200 80ac 	bhi.w	8009494 <USBD_GetDescriptor+0x204>
 800933c:	a201      	add	r2, pc, #4	@ (adr r2, 8009344 <USBD_GetDescriptor+0xb4>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009391 	.word	0x08009391
 800934c:	080093c5 	.word	0x080093c5
 8009350:	080093f9 	.word	0x080093f9
 8009354:	0800942d 	.word	0x0800942d
 8009358:	08009461 	.word	0x08009461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7c12      	ldrb	r2, [r2, #16]
 8009374:	f107 0108 	add.w	r1, r7, #8
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937e:	e091      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 facb 	bl	800991e <USBD_CtlError>
            err++;
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	3301      	adds	r3, #1
 800938c:	72fb      	strb	r3, [r7, #11]
          break;
 800938e:	e089      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e077      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fab1 	bl	800991e <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e06f      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e05d      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa97 	bl	800991e <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e055      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7c12      	ldrb	r2, [r2, #16]
 8009410:	f107 0108 	add.w	r1, r7, #8
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941a:	e043      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa7d 	bl	800991e <USBD_CtlError>
            err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
          break;
 800942a:	e03b      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00b      	beq.n	8009450 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	7c12      	ldrb	r2, [r2, #16]
 8009444:	f107 0108 	add.w	r1, r7, #8
 8009448:	4610      	mov	r0, r2
 800944a:	4798      	blx	r3
 800944c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944e:	e029      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa63 	bl	800991e <USBD_CtlError>
            err++;
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	3301      	adds	r3, #1
 800945c:	72fb      	strb	r3, [r7, #11]
          break;
 800945e:	e021      	b.n	80094a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	7c12      	ldrb	r2, [r2, #16]
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009482:	e00f      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa49 	bl	800991e <USBD_CtlError>
            err++;
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	3301      	adds	r3, #1
 8009490:	72fb      	strb	r3, [r7, #11]
          break;
 8009492:	e007      	b.n	80094a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa41 	bl	800991e <USBD_CtlError>
          err++;
 800949c:	7afb      	ldrb	r3, [r7, #11]
 800949e:	3301      	adds	r3, #1
 80094a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80094a2:	bf00      	nop
      }
      break;
 80094a4:	e037      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7c1b      	ldrb	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b6:	f107 0208 	add.w	r2, r7, #8
 80094ba:	4610      	mov	r0, r2
 80094bc:	4798      	blx	r3
 80094be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094c0:	e029      	b.n	8009516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa2a 	bl	800991e <USBD_CtlError>
        err++;
 80094ca:	7afb      	ldrb	r3, [r7, #11]
 80094cc:	3301      	adds	r3, #1
 80094ce:	72fb      	strb	r3, [r7, #11]
      break;
 80094d0:	e021      	b.n	8009516 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7c1b      	ldrb	r3, [r3, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e2:	f107 0208 	add.w	r2, r7, #8
 80094e6:	4610      	mov	r0, r2
 80094e8:	4798      	blx	r3
 80094ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	2207      	movs	r2, #7
 80094f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f4:	e00f      	b.n	8009516 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa10 	bl	800991e <USBD_CtlError>
        err++;
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	3301      	adds	r3, #1
 8009502:	72fb      	strb	r3, [r7, #11]
      break;
 8009504:	e007      	b.n	8009516 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fa08 	bl	800991e <USBD_CtlError>
      err++;
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	3301      	adds	r3, #1
 8009512:	72fb      	strb	r3, [r7, #11]
      break;
 8009514:	bf00      	nop
  }

  if (err != 0U)
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11e      	bne.n	800955a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	88db      	ldrh	r3, [r3, #6]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d016      	beq.n	8009552 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009524:	893b      	ldrh	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	88da      	ldrh	r2, [r3, #6]
 800952e:	893b      	ldrh	r3, [r7, #8]
 8009530:	4293      	cmp	r3, r2
 8009532:	bf28      	it	cs
 8009534:	4613      	movcs	r3, r2
 8009536:	b29b      	uxth	r3, r3
 8009538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800953a:	893b      	ldrh	r3, [r7, #8]
 800953c:	461a      	mov	r2, r3
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa69 	bl	8009a18 <USBD_CtlSendData>
 8009546:	e009      	b.n	800955c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9e7 	bl	800991e <USBD_CtlError>
 8009550:	e004      	b.n	800955c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 faba 	bl	8009acc <USBD_CtlSendStatus>
 8009558:	e000      	b.n	800955c <USBD_GetDescriptor+0x2cc>
    return;
 800955a:	bf00      	nop
  }
}
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop

08009564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	889b      	ldrh	r3, [r3, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d131      	bne.n	80095da <USBD_SetAddress+0x76>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88db      	ldrh	r3, [r3, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d12d      	bne.n	80095da <USBD_SetAddress+0x76>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	2b7f      	cmp	r3, #127	@ 0x7f
 8009584:	d829      	bhi.n	80095da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	885b      	ldrh	r3, [r3, #2]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b03      	cmp	r3, #3
 800959c:	d104      	bne.n	80095a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9bc 	bl	800991e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a6:	e01d      	b.n	80095e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	7bfa      	ldrb	r2, [r7, #15]
 80095ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 ff11 	bl	800a3dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fa86 	bl	8009acc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ce:	e009      	b.n	80095e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d8:	e004      	b.n	80095e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095da:	6839      	ldr	r1, [r7, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f99e 	bl	800991e <USBD_CtlError>
  }
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	4b4e      	ldr	r3, [pc, #312]	@ (800973c <USBD_SetConfig+0x150>)
 8009602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009604:	4b4d      	ldr	r3, [pc, #308]	@ (800973c <USBD_SetConfig+0x150>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d905      	bls.n	8009618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f985 	bl	800991e <USBD_CtlError>
    return USBD_FAIL;
 8009614:	2303      	movs	r3, #3
 8009616:	e08c      	b.n	8009732 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d002      	beq.n	800962a <USBD_SetConfig+0x3e>
 8009624:	2b03      	cmp	r3, #3
 8009626:	d029      	beq.n	800967c <USBD_SetConfig+0x90>
 8009628:	e075      	b.n	8009716 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800962a:	4b44      	ldr	r3, [pc, #272]	@ (800973c <USBD_SetConfig+0x150>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d020      	beq.n	8009674 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009632:	4b42      	ldr	r3, [pc, #264]	@ (800973c <USBD_SetConfig+0x150>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800963c:	4b3f      	ldr	r3, [pc, #252]	@ (800973c <USBD_SetConfig+0x150>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fe ffe3 	bl	800860e <USBD_SetClassConfig>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f962 	bl	800991e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009662:	e065      	b.n	8009730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa31 	bl	8009acc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2203      	movs	r2, #3
 800966e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009672:	e05d      	b.n	8009730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa29 	bl	8009acc <USBD_CtlSendStatus>
      break;
 800967a:	e059      	b.n	8009730 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800967c:	4b2f      	ldr	r3, [pc, #188]	@ (800973c <USBD_SetConfig+0x150>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d112      	bne.n	80096aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800968c:	4b2b      	ldr	r3, [pc, #172]	@ (800973c <USBD_SetConfig+0x150>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009696:	4b29      	ldr	r3, [pc, #164]	@ (800973c <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fe ffd2 	bl	8008646 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa12 	bl	8009acc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096a8:	e042      	b.n	8009730 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80096aa:	4b24      	ldr	r3, [pc, #144]	@ (800973c <USBD_SetConfig+0x150>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d02a      	beq.n	800970e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7fe ffc0 	bl	8008646 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80096c6:	4b1d      	ldr	r3, [pc, #116]	@ (800973c <USBD_SetConfig+0x150>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	@ (800973c <USBD_SetConfig+0x150>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fe ff99 	bl	800860e <USBD_SetClassConfig>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00f      	beq.n	8009706 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f918 	bl	800991e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fe ffa5 	bl	8008646 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009704:	e014      	b.n	8009730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9e0 	bl	8009acc <USBD_CtlSendStatus>
      break;
 800970c:	e010      	b.n	8009730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f9dc 	bl	8009acc <USBD_CtlSendStatus>
      break;
 8009714:	e00c      	b.n	8009730 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f900 	bl	800991e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800971e:	4b07      	ldr	r3, [pc, #28]	@ (800973c <USBD_SetConfig+0x150>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7fe ff8e 	bl	8008646 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800972a:	2303      	movs	r3, #3
 800972c:	73fb      	strb	r3, [r7, #15]
      break;
 800972e:	bf00      	nop
  }

  return ret;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20000454 	.word	0x20000454

08009740 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	88db      	ldrh	r3, [r3, #6]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d004      	beq.n	800975c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8e2 	bl	800991e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800975a:	e023      	b.n	80097a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b02      	cmp	r3, #2
 8009766:	dc02      	bgt.n	800976e <USBD_GetConfig+0x2e>
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc03      	bgt.n	8009774 <USBD_GetConfig+0x34>
 800976c:	e015      	b.n	800979a <USBD_GetConfig+0x5a>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d00b      	beq.n	800978a <USBD_GetConfig+0x4a>
 8009772:	e012      	b.n	800979a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3308      	adds	r3, #8
 800977e:	2201      	movs	r2, #1
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f948 	bl	8009a18 <USBD_CtlSendData>
        break;
 8009788:	e00c      	b.n	80097a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3304      	adds	r3, #4
 800978e:	2201      	movs	r2, #1
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f940 	bl	8009a18 <USBD_CtlSendData>
        break;
 8009798:	e004      	b.n	80097a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f8be 	bl	800991e <USBD_CtlError>
        break;
 80097a2:	bf00      	nop
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d81e      	bhi.n	8009802 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	88db      	ldrh	r3, [r3, #6]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d004      	beq.n	80097d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f8a5 	bl	800991e <USBD_CtlError>
        break;
 80097d4:	e01a      	b.n	800980c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d005      	beq.n	80097f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f043 0202 	orr.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	330c      	adds	r3, #12
 80097f6:	2202      	movs	r2, #2
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f90c 	bl	8009a18 <USBD_CtlSendData>
      break;
 8009800:	e004      	b.n	800980c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f88a 	bl	800991e <USBD_CtlError>
      break;
 800980a:	bf00      	nop
  }
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d107      	bne.n	8009836 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f94c 	bl	8009acc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009834:	e013      	b.n	800985e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	2b02      	cmp	r3, #2
 800983c:	d10b      	bne.n	8009856 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	889b      	ldrh	r3, [r3, #4]
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	b29b      	uxth	r3, r3
 8009846:	b2da      	uxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f93c 	bl	8009acc <USBD_CtlSendStatus>
}
 8009854:	e003      	b.n	800985e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f860 	bl	800991e <USBD_CtlError>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009876:	b2db      	uxtb	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	2b02      	cmp	r3, #2
 800987c:	d80b      	bhi.n	8009896 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d10c      	bne.n	80098a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f91c 	bl	8009acc <USBD_CtlSendStatus>
      }
      break;
 8009894:	e004      	b.n	80098a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f840 	bl	800991e <USBD_CtlError>
      break;
 800989e:	e000      	b.n	80098a2 <USBD_ClrFeature+0x3c>
      break;
 80098a0:	bf00      	nop
  }
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff fa40 	bl	8008d5a <SWAPBYTE>
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3301      	adds	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fa33 	bl	8008d5a <SWAPBYTE>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff fa26 	bl	8008d5a <SWAPBYTE>
 800990e:	4603      	mov	r3, r0
 8009910:	461a      	mov	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	80da      	strh	r2, [r3, #6]
}
 8009916:	bf00      	nop
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009928:	2180      	movs	r1, #128	@ 0x80
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fcec 	bl	800a308 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fce8 	bl	800a308 <USBD_LL_StallEP>
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d042      	beq.n	80099dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f000 f842 	bl	80099e4 <USBD_GetLen>
 8009960:	4603      	mov	r3, r0
 8009962:	3301      	adds	r3, #1
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996a:	d808      	bhi.n	800997e <USBD_GetString+0x3e>
 800996c:	6938      	ldr	r0, [r7, #16]
 800996e:	f000 f839 	bl	80099e4 <USBD_GetLen>
 8009972:	4603      	mov	r3, r0
 8009974:	3301      	adds	r3, #1
 8009976:	b29b      	uxth	r3, r3
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	e001      	b.n	8009982 <USBD_GetString+0x42>
 800997e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	4413      	add	r3, r2
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7812      	ldrb	r2, [r2, #0]
 8009990:	701a      	strb	r2, [r3, #0]
  idx++;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	3301      	adds	r3, #1
 8009996:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	2203      	movs	r2, #3
 80099a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	3301      	adds	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099a8:	e013      	b.n	80099d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80099aa:	7dfb      	ldrb	r3, [r7, #23]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	4413      	add	r3, r2
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	3301      	adds	r3, #1
 80099ba:	613b      	str	r3, [r7, #16]
    idx++;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	3301      	adds	r3, #1
 80099c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	4413      	add	r3, r2
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	3301      	adds	r3, #1
 80099d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e7      	bne.n	80099aa <USBD_GetString+0x6a>
 80099da:	e000      	b.n	80099de <USBD_GetString+0x9e>
    return;
 80099dc:	bf00      	nop
  }
}
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099f4:	e005      	b.n	8009a02 <USBD_GetLen+0x1e>
  {
    len++;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	3301      	adds	r3, #1
 80099fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3301      	adds	r3, #1
 8009a00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1f5      	bne.n	80099f6 <USBD_GetLen+0x12>
  }

  return len;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fceb 	bl	800a41a <USBD_LL_Transmit>

  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fcda 	bl	800a41a <USBD_LL_Transmit>

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 fcde 	bl	800a45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	2100      	movs	r1, #0
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 fccd 	bl	800a45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009adc:	2300      	movs	r3, #0
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fc99 	bl	800a41a <USBD_LL_Transmit>

  return USBD_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2205      	movs	r2, #5
 8009afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b02:	2300      	movs	r3, #0
 8009b04:	2200      	movs	r2, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fca7 	bl	800a45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4912      	ldr	r1, [pc, #72]	@ (8009b68 <MX_USB_DEVICE_Init+0x50>)
 8009b20:	4812      	ldr	r0, [pc, #72]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b22:	f7fe fcf7 	bl	8008514 <USBD_Init>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b2c:	f7f7 ff4c 	bl	80019c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b30:	490f      	ldr	r1, [pc, #60]	@ (8009b70 <MX_USB_DEVICE_Init+0x58>)
 8009b32:	480e      	ldr	r0, [pc, #56]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b34:	f7fe fd1e 	bl	8008574 <USBD_RegisterClass>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b3e:	f7f7 ff43 	bl	80019c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b42:	490c      	ldr	r1, [pc, #48]	@ (8009b74 <MX_USB_DEVICE_Init+0x5c>)
 8009b44:	4809      	ldr	r0, [pc, #36]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b46:	f7fe fc15 	bl	8008374 <USBD_CDC_RegisterInterface>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b50:	f7f7 ff3a 	bl	80019c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b54:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <MX_USB_DEVICE_Init+0x54>)
 8009b56:	f7fe fd43 	bl	80085e0 <USBD_Start>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b60:	f7f7 ff32 	bl	80019c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b64:	bf00      	nop
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	200000b0 	.word	0x200000b0
 8009b6c:	20000458 	.word	0x20000458
 8009b70:	2000001c 	.word	0x2000001c
 8009b74:	2000009c 	.word	0x2000009c

08009b78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4905      	ldr	r1, [pc, #20]	@ (8009b94 <CDC_Init_FS+0x1c>)
 8009b80:	4805      	ldr	r0, [pc, #20]	@ (8009b98 <CDC_Init_FS+0x20>)
 8009b82:	f7fe fc11 	bl	80083a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b86:	4905      	ldr	r1, [pc, #20]	@ (8009b9c <CDC_Init_FS+0x24>)
 8009b88:	4803      	ldr	r0, [pc, #12]	@ (8009b98 <CDC_Init_FS+0x20>)
 8009b8a:	f7fe fc2f 	bl	80083ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000f34 	.word	0x20000f34
 8009b98:	20000458 	.word	0x20000458
 8009b9c:	20000734 	.word	0x20000734

08009ba0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ba4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6039      	str	r1, [r7, #0]
 8009bba:	71fb      	strb	r3, [r7, #7]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	2b23      	cmp	r3, #35	@ 0x23
 8009bc4:	d84a      	bhi.n	8009c5c <CDC_Control_FS+0xac>
 8009bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bcc <CDC_Control_FS+0x1c>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c5d 	.word	0x08009c5d
 8009bd0:	08009c5d 	.word	0x08009c5d
 8009bd4:	08009c5d 	.word	0x08009c5d
 8009bd8:	08009c5d 	.word	0x08009c5d
 8009bdc:	08009c5d 	.word	0x08009c5d
 8009be0:	08009c5d 	.word	0x08009c5d
 8009be4:	08009c5d 	.word	0x08009c5d
 8009be8:	08009c5d 	.word	0x08009c5d
 8009bec:	08009c5d 	.word	0x08009c5d
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c5d 	.word	0x08009c5d
 8009c00:	08009c5d 	.word	0x08009c5d
 8009c04:	08009c5d 	.word	0x08009c5d
 8009c08:	08009c5d 	.word	0x08009c5d
 8009c0c:	08009c5d 	.word	0x08009c5d
 8009c10:	08009c5d 	.word	0x08009c5d
 8009c14:	08009c5d 	.word	0x08009c5d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c5d 	.word	0x08009c5d
 8009c20:	08009c5d 	.word	0x08009c5d
 8009c24:	08009c5d 	.word	0x08009c5d
 8009c28:	08009c5d 	.word	0x08009c5d
 8009c2c:	08009c5d 	.word	0x08009c5d
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c5d 	.word	0x08009c5d
 8009c3c:	08009c5d 	.word	0x08009c5d
 8009c40:	08009c5d 	.word	0x08009c5d
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c5d 	.word	0x08009c5d
 8009c4c:	08009c5d 	.word	0x08009c5d
 8009c50:	08009c5d 	.word	0x08009c5d
 8009c54:	08009c5d 	.word	0x08009c5d
 8009c58:	08009c5d 	.word	0x08009c5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c5c:	bf00      	nop
  }

  return (USBD_OK);
 8009c5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	4805      	ldr	r0, [pc, #20]	@ (8009c90 <CDC_Receive_FS+0x24>)
 8009c7a:	f7fe fbb7 	bl	80083ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c7e:	4804      	ldr	r0, [pc, #16]	@ (8009c90 <CDC_Receive_FS+0x24>)
 8009c80:	f7fe fc12 	bl	80084a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000458 	.word	0x20000458

08009c94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <CDC_Transmit_FS+0x48>)
 8009ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009caa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e00b      	b.n	8009cd2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cba:	887b      	ldrh	r3, [r7, #2]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4806      	ldr	r0, [pc, #24]	@ (8009cdc <CDC_Transmit_FS+0x48>)
 8009cc2:	f7fe fb71 	bl	80083a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cc6:	4805      	ldr	r0, [pc, #20]	@ (8009cdc <CDC_Transmit_FS+0x48>)
 8009cc8:	f7fe fbae 	bl	8008428 <USBD_CDC_TransmitPacket>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000458 	.word	0x20000458

08009ce0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	4613      	mov	r3, r2
 8009cec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	6039      	str	r1, [r7, #0]
 8009d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2212      	movs	r2, #18
 8009d14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d16:	4b03      	ldr	r3, [pc, #12]	@ (8009d24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	200000cc 	.word	0x200000cc

08009d28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2204      	movs	r2, #4
 8009d38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d3a:	4b03      	ldr	r3, [pc, #12]	@ (8009d48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	200000e0 	.word	0x200000e0

08009d4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4603      	mov	r3, r0
 8009d54:	6039      	str	r1, [r7, #0]
 8009d56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d105      	bne.n	8009d6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	4907      	ldr	r1, [pc, #28]	@ (8009d80 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d62:	4808      	ldr	r0, [pc, #32]	@ (8009d84 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d64:	f7ff fdec 	bl	8009940 <USBD_GetString>
 8009d68:	e004      	b.n	8009d74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4904      	ldr	r1, [pc, #16]	@ (8009d80 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d6e:	4805      	ldr	r0, [pc, #20]	@ (8009d84 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d70:	f7ff fde6 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d74:	4b02      	ldr	r3, [pc, #8]	@ (8009d80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20001734 	.word	0x20001734
 8009d84:	0800a5bc 	.word	0x0800a5bc

08009d88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	6039      	str	r1, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	4904      	ldr	r1, [pc, #16]	@ (8009da8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d98:	4804      	ldr	r0, [pc, #16]	@ (8009dac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d9a:	f7ff fdd1 	bl	8009940 <USBD_GetString>
  return USBD_StrDesc;
 8009d9e:	4b02      	ldr	r3, [pc, #8]	@ (8009da8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20001734 	.word	0x20001734
 8009dac:	0800a5d4 	.word	0x0800a5d4

08009db0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	221a      	movs	r2, #26
 8009dc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dc2:	f000 f843 	bl	8009e4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dc6:	4b02      	ldr	r3, [pc, #8]	@ (8009dd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	200000e4 	.word	0x200000e4

08009dd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d105      	bne.n	8009df2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4907      	ldr	r1, [pc, #28]	@ (8009e08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dea:	4808      	ldr	r0, [pc, #32]	@ (8009e0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009dec:	f7ff fda8 	bl	8009940 <USBD_GetString>
 8009df0:	e004      	b.n	8009dfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4904      	ldr	r1, [pc, #16]	@ (8009e08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009df6:	4805      	ldr	r0, [pc, #20]	@ (8009e0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009df8:	f7ff fda2 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dfc:	4b02      	ldr	r3, [pc, #8]	@ (8009e08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20001734 	.word	0x20001734
 8009e0c:	0800a5e8 	.word	0x0800a5e8

08009e10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d105      	bne.n	8009e2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	4907      	ldr	r1, [pc, #28]	@ (8009e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e26:	4808      	ldr	r0, [pc, #32]	@ (8009e48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e28:	f7ff fd8a 	bl	8009940 <USBD_GetString>
 8009e2c:	e004      	b.n	8009e38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4904      	ldr	r1, [pc, #16]	@ (8009e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e32:	4805      	ldr	r0, [pc, #20]	@ (8009e48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e34:	f7ff fd84 	bl	8009940 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e38:	4b02      	ldr	r3, [pc, #8]	@ (8009e44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20001734 	.word	0x20001734
 8009e48:	0800a5f4 	.word	0x0800a5f4

08009e4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e52:	4b0f      	ldr	r3, [pc, #60]	@ (8009e90 <Get_SerialNum+0x44>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e58:	4b0e      	ldr	r3, [pc, #56]	@ (8009e94 <Get_SerialNum+0x48>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e98 <Get_SerialNum+0x4c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e72:	2208      	movs	r2, #8
 8009e74:	4909      	ldr	r1, [pc, #36]	@ (8009e9c <Get_SerialNum+0x50>)
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f814 	bl	8009ea4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e7c:	2204      	movs	r2, #4
 8009e7e:	4908      	ldr	r1, [pc, #32]	@ (8009ea0 <Get_SerialNum+0x54>)
 8009e80:	68b8      	ldr	r0, [r7, #8]
 8009e82:	f000 f80f 	bl	8009ea4 <IntToUnicode>
  }
}
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	1fff7a10 	.word	0x1fff7a10
 8009e94:	1fff7a14 	.word	0x1fff7a14
 8009e98:	1fff7a18 	.word	0x1fff7a18
 8009e9c:	200000e6 	.word	0x200000e6
 8009ea0:	200000f6 	.word	0x200000f6

08009ea4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	75fb      	strb	r3, [r7, #23]
 8009eba:	e027      	b.n	8009f0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	0f1b      	lsrs	r3, r3, #28
 8009ec0:	2b09      	cmp	r3, #9
 8009ec2:	d80b      	bhi.n	8009edc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	0f1b      	lsrs	r3, r3, #28
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	4619      	mov	r1, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	440b      	add	r3, r1
 8009ed4:	3230      	adds	r2, #48	@ 0x30
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	e00a      	b.n	8009ef2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	0f1b      	lsrs	r3, r3, #28
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	440b      	add	r3, r1
 8009eec:	3237      	adds	r2, #55	@ 0x37
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	3301      	adds	r3, #1
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	4413      	add	r3, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	75fb      	strb	r3, [r7, #23]
 8009f0c:	7dfa      	ldrb	r2, [r7, #23]
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d3d3      	bcc.n	8009ebc <IntToUnicode+0x18>
  }
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
	...

08009f24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08a      	sub	sp, #40	@ 0x28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f2c:	f107 0314 	add.w	r3, r7, #20
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	605a      	str	r2, [r3, #4]
 8009f36:	609a      	str	r2, [r3, #8]
 8009f38:	60da      	str	r2, [r3, #12]
 8009f3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f44:	d13a      	bne.n	8009fbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f46:	2300      	movs	r3, #0
 8009f48:	613b      	str	r3, [r7, #16]
 8009f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f50:	f043 0301 	orr.w	r3, r3, #1
 8009f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f56:	4b1b      	ldr	r3, [pc, #108]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	613b      	str	r3, [r7, #16]
 8009f60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f62:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f70:	2303      	movs	r3, #3
 8009f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f74:	230a      	movs	r3, #10
 8009f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f78:	f107 0314 	add.w	r3, r7, #20
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4812      	ldr	r0, [pc, #72]	@ (8009fc8 <HAL_PCD_MspInit+0xa4>)
 8009f80:	f7f9 f9c0 	bl	8003304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f84:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	4a0e      	ldr	r2, [pc, #56]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f8e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f98:	4a0a      	ldr	r2, [pc, #40]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009fa0:	4b08      	ldr	r3, [pc, #32]	@ (8009fc4 <HAL_PCD_MspInit+0xa0>)
 8009fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fa8:	60fb      	str	r3, [r7, #12]
 8009faa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fac:	2200      	movs	r2, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	2043      	movs	r0, #67	@ 0x43
 8009fb2:	f7f8 fc76 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fb6:	2043      	movs	r0, #67	@ 0x43
 8009fb8:	f7f8 fc8f 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3728      	adds	r7, #40	@ 0x28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40023800 	.word	0x40023800
 8009fc8:	40020000 	.word	0x40020000

08009fcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	f7fe fb49 	bl	800867a <USBD_LL_SetupStage>
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	4619      	mov	r1, r3
 800a01a:	f7fe fb83 	bl	8008724 <USBD_LL_DataOutStage>
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	460b      	mov	r3, r1
 800a030:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	3320      	adds	r3, #32
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	4619      	mov	r1, r3
 800a04e:	f7fe fc1c 	bl	800888a <USBD_LL_DataInStage>
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fd56 	bl	8008b1a <USBD_LL_SOF>
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a07e:	2301      	movs	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	79db      	ldrb	r3, [r3, #7]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d102      	bne.n	800a090 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
 800a08e:	e008      	b.n	800a0a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	79db      	ldrb	r3, [r3, #7]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d102      	bne.n	800a09e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	e001      	b.n	800a0a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a09e:	f7f7 fc93 	bl	80019c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0a8:	7bfa      	ldrb	r2, [r7, #15]
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fcf0 	bl	8008a92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe fc98 	bl	80089ee <USBD_LL_Reset>
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fceb 	bl	8008ab2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	6812      	ldr	r2, [r2, #0]
 800a0ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	7adb      	ldrb	r3, [r3, #11]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d005      	beq.n	800a108 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0fc:	4b04      	ldr	r3, [pc, #16]	@ (800a110 <HAL_PCD_SuspendCallback+0x48>)
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	4a03      	ldr	r2, [pc, #12]	@ (800a110 <HAL_PCD_SuspendCallback+0x48>)
 800a102:	f043 0306 	orr.w	r3, r3, #6
 800a106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	e000ed00 	.word	0xe000ed00

0800a114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fce1 	bl	8008aea <USBD_LL_Resume>
}
 800a128:	bf00      	nop
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a142:	78fa      	ldrb	r2, [r7, #3]
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fd39 	bl	8008bbe <USBD_LL_IsoOUTIncomplete>
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fcf5 	bl	8008b5a <USBD_LL_IsoINIncomplete>
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fd4b 	bl	8008c22 <USBD_LL_DevConnected>
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fd48 	bl	8008c38 <USBD_LL_DevDisconnected>
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d13c      	bne.n	800a23a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1c0:	4a20      	ldr	r2, [pc, #128]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1cc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a1d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a1d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1da:	2204      	movs	r2, #4
 800a1dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1de:	4b19      	ldr	r3, [pc, #100]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1e4:	4b17      	ldr	r3, [pc, #92]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1ea:	4b16      	ldr	r3, [pc, #88]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1f0:	4b14      	ldr	r3, [pc, #80]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1f6:	4b13      	ldr	r3, [pc, #76]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1fc:	4b11      	ldr	r3, [pc, #68]	@ (800a244 <USBD_LL_Init+0x94>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a202:	4b10      	ldr	r3, [pc, #64]	@ (800a244 <USBD_LL_Init+0x94>)
 800a204:	2200      	movs	r2, #0
 800a206:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a208:	4b0e      	ldr	r3, [pc, #56]	@ (800a244 <USBD_LL_Init+0x94>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a20e:	480d      	ldr	r0, [pc, #52]	@ (800a244 <USBD_LL_Init+0x94>)
 800a210:	f7f9 fa47 	bl	80036a2 <HAL_PCD_Init>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a21a:	f7f7 fbd5 	bl	80019c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a21e:	2180      	movs	r1, #128	@ 0x80
 800a220:	4808      	ldr	r0, [pc, #32]	@ (800a244 <USBD_LL_Init+0x94>)
 800a222:	f7fa fc74 	bl	8004b0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a226:	2240      	movs	r2, #64	@ 0x40
 800a228:	2100      	movs	r1, #0
 800a22a:	4806      	ldr	r0, [pc, #24]	@ (800a244 <USBD_LL_Init+0x94>)
 800a22c:	f7fa fc28 	bl	8004a80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a230:	2280      	movs	r2, #128	@ 0x80
 800a232:	2101      	movs	r1, #1
 800a234:	4803      	ldr	r0, [pc, #12]	@ (800a244 <USBD_LL_Init+0x94>)
 800a236:	f7fa fc23 	bl	8004a80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20001934 	.word	0x20001934

0800a248 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a25e:	4618      	mov	r0, r3
 800a260:	f7f9 fb2e 	bl	80038c0 <HAL_PCD_Start>
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f942 	bl	800a4f4 <USBD_Get_USB_Status>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a274:	7bbb      	ldrb	r3, [r7, #14]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	4608      	mov	r0, r1
 800a288:	4611      	mov	r1, r2
 800a28a:	461a      	mov	r2, r3
 800a28c:	4603      	mov	r3, r0
 800a28e:	70fb      	strb	r3, [r7, #3]
 800a290:	460b      	mov	r3, r1
 800a292:	70bb      	strb	r3, [r7, #2]
 800a294:	4613      	mov	r3, r2
 800a296:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a2a6:	78bb      	ldrb	r3, [r7, #2]
 800a2a8:	883a      	ldrh	r2, [r7, #0]
 800a2aa:	78f9      	ldrb	r1, [r7, #3]
 800a2ac:	f7fa f802 	bl	80042b4 <HAL_PCD_EP_Open>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f91c 	bl	800a4f4 <USBD_Get_USB_Status>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fa f84d 	bl	8004388 <HAL_PCD_EP_Close>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f8fd 	bl	800a4f4 <USBD_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7fa f905 	bl	8004536 <HAL_PCD_EP_SetStall>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f8de 	bl	800a4f4 <USBD_Get_USB_Status>
 800a338:	4603      	mov	r3, r0
 800a33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	460b      	mov	r3, r1
 800a350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a360:	78fa      	ldrb	r2, [r7, #3]
 800a362:	4611      	mov	r1, r2
 800a364:	4618      	mov	r0, r3
 800a366:	f7fa f949 	bl	80045fc <HAL_PCD_EP_ClrStall>
 800a36a:	4603      	mov	r3, r0
 800a36c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f8bf 	bl	800a4f4 <USBD_Get_USB_Status>
 800a376:	4603      	mov	r3, r0
 800a378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a37a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a396:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	da0b      	bge.n	800a3b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3a0:	78fb      	ldrb	r3, [r7, #3]
 800a3a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3a6:	68f9      	ldr	r1, [r7, #12]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	440b      	add	r3, r1
 800a3b2:	3316      	adds	r3, #22
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	e00b      	b.n	800a3d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3be:	68f9      	ldr	r1, [r7, #12]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	440b      	add	r3, r1
 800a3ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a3ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f9 ff36 	bl	800426c <HAL_PCD_SetAddress>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f874 	bl	800a4f4 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
 800a426:	460b      	mov	r3, r1
 800a428:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a438:	7af9      	ldrb	r1, [r7, #11]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	f7fa f840 	bl	80044c2 <HAL_PCD_EP_Transmit>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f853 	bl	800a4f4 <USBD_Get_USB_Status>
 800a44e:	4603      	mov	r3, r0
 800a450:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a452:	7dbb      	ldrb	r3, [r7, #22]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	607a      	str	r2, [r7, #4]
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	460b      	mov	r3, r1
 800a46a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a47a:	7af9      	ldrb	r1, [r7, #11]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	f7f9 ffcc 	bl	800441c <HAL_PCD_EP_Receive>
 800a484:	4603      	mov	r3, r0
 800a486:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 f832 	bl	800a4f4 <USBD_Get_USB_Status>
 800a490:	4603      	mov	r3, r0
 800a492:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a494:	7dbb      	ldrb	r3, [r7, #22]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4b0:	78fa      	ldrb	r2, [r7, #3]
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7f9 ffec 	bl	8004492 <HAL_PCD_EP_GetRxCount>
 800a4ba:	4603      	mov	r3, r0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4cc:	4b03      	ldr	r3, [pc, #12]	@ (800a4dc <USBD_static_malloc+0x18>)
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	20001e18 	.word	0x20001e18

0800a4e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]

}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	2b03      	cmp	r3, #3
 800a506:	d817      	bhi.n	800a538 <USBD_Get_USB_Status+0x44>
 800a508:	a201      	add	r2, pc, #4	@ (adr r2, 800a510 <USBD_Get_USB_Status+0x1c>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a521 	.word	0x0800a521
 800a514:	0800a527 	.word	0x0800a527
 800a518:	0800a52d 	.word	0x0800a52d
 800a51c:	0800a533 	.word	0x0800a533
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	73fb      	strb	r3, [r7, #15]
    break;
 800a524:	e00b      	b.n	800a53e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a526:	2303      	movs	r3, #3
 800a528:	73fb      	strb	r3, [r7, #15]
    break;
 800a52a:	e008      	b.n	800a53e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a52c:	2301      	movs	r3, #1
 800a52e:	73fb      	strb	r3, [r7, #15]
    break;
 800a530:	e005      	b.n	800a53e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	73fb      	strb	r3, [r7, #15]
    break;
 800a536:	e002      	b.n	800a53e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a538:	2303      	movs	r3, #3
 800a53a:	73fb      	strb	r3, [r7, #15]
    break;
 800a53c:	bf00      	nop
  }
  return usb_status;
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <memset>:
 800a54c:	4402      	add	r2, r0
 800a54e:	4603      	mov	r3, r0
 800a550:	4293      	cmp	r3, r2
 800a552:	d100      	bne.n	800a556 <memset+0xa>
 800a554:	4770      	bx	lr
 800a556:	f803 1b01 	strb.w	r1, [r3], #1
 800a55a:	e7f9      	b.n	800a550 <memset+0x4>

0800a55c <__libc_init_array>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	4d0d      	ldr	r5, [pc, #52]	@ (800a594 <__libc_init_array+0x38>)
 800a560:	4c0d      	ldr	r4, [pc, #52]	@ (800a598 <__libc_init_array+0x3c>)
 800a562:	1b64      	subs	r4, r4, r5
 800a564:	10a4      	asrs	r4, r4, #2
 800a566:	2600      	movs	r6, #0
 800a568:	42a6      	cmp	r6, r4
 800a56a:	d109      	bne.n	800a580 <__libc_init_array+0x24>
 800a56c:	4d0b      	ldr	r5, [pc, #44]	@ (800a59c <__libc_init_array+0x40>)
 800a56e:	4c0c      	ldr	r4, [pc, #48]	@ (800a5a0 <__libc_init_array+0x44>)
 800a570:	f000 f818 	bl	800a5a4 <_init>
 800a574:	1b64      	subs	r4, r4, r5
 800a576:	10a4      	asrs	r4, r4, #2
 800a578:	2600      	movs	r6, #0
 800a57a:	42a6      	cmp	r6, r4
 800a57c:	d105      	bne.n	800a58a <__libc_init_array+0x2e>
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	f855 3b04 	ldr.w	r3, [r5], #4
 800a584:	4798      	blx	r3
 800a586:	3601      	adds	r6, #1
 800a588:	e7ee      	b.n	800a568 <__libc_init_array+0xc>
 800a58a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58e:	4798      	blx	r3
 800a590:	3601      	adds	r6, #1
 800a592:	e7f2      	b.n	800a57a <__libc_init_array+0x1e>
 800a594:	0800a624 	.word	0x0800a624
 800a598:	0800a624 	.word	0x0800a624
 800a59c:	0800a624 	.word	0x0800a624
 800a5a0:	0800a628 	.word	0x0800a628

0800a5a4 <_init>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	bf00      	nop
 800a5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5aa:	bc08      	pop	{r3}
 800a5ac:	469e      	mov	lr, r3
 800a5ae:	4770      	bx	lr

0800a5b0 <_fini>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	bf00      	nop
 800a5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b6:	bc08      	pop	{r3}
 800a5b8:	469e      	mov	lr, r3
 800a5ba:	4770      	bx	lr
